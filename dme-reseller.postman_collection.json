{
	"info": {
		"name": "dme-reseller",
		"_postman_id": "23ddf817-bc1a-1df5-8d6e-fa3262592db3",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "POST /api/users/get_token - archiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"X-Access-Token-Archiver\", jsonData.authentication_token);",
									"",
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "prasetyanto.archiver01+11@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/get_token",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"get_token"
							]
						},
						"description": "Generate single sign on link"
					},
					"response": []
				},
				{
					"name": "POST /api/users/get_token - backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"X-Access-Token-Backup\", jsonData.authentication_token);",
									"",
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "prasetyanto.backup01+11@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "backup123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/get_token",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"get_token"
							]
						},
						"description": "Generate single sign on link"
					},
					"response": []
				},
				{
					"name": "POST /api/users/get_token - personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"X-Access-Token-Personal\", jsonData.authentication_token);",
									"",
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "prasetyanto.personal01+11@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "personal123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/get_token",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"get_token"
							]
						},
						"description": "Generate single sign on link"
					},
					"response": []
				},
				{
					"name": "GET /api/users/generate_redirect_link - archiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/generate_redirect_link",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"generate_redirect_link"
							]
						},
						"description": "Generate single sign on link"
					},
					"response": []
				},
				{
					"name": "GET /api/users/generate_redirect_link - personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Personal}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/generate_redirect_link",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"generate_redirect_link"
							]
						},
						"description": "Generate single sign on link"
					},
					"response": []
				},
				{
					"name": "GET /api/users/generate_redirect_link - backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Backup}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/generate_redirect_link",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"generate_redirect_link"
							]
						},
						"description": "Generate single sign on link"
					},
					"response": []
				},
				{
					"name": "GET /api/users - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"",
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Returns an array of user objects."
					},
					"response": []
				},
				{
					"name": "GET /api/users - by params : email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"email is prasetyanto.archiver01+11@gmail.com is \" + jsonData.email.has(\"prasetyanto.archiver01+11@gmail.com\")] = jsonData.email.has(\"prasetyanto.archiver01+11@gmail.com\")",
									"",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users?email=prasetyanto.archiver01%2B11%40gmail.com",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "email",
									"value": "prasetyanto.archiver01%2B11%40gmail.com",
									"equals": true
								}
							]
						},
						"description": "Returns an array of user objects, by parameter email."
					},
					"response": []
				},
				{
					"name": "GET /api/users - by params : external_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"email is prasetyanto.archiver01+11@gmail.com is \" + jsonData.email.has(\"prasetyanto.archiver01+11@gmail.com\")] = jsonData.email.has(\"prasetyanto.archiver01+11@gmail.com\")",
									"",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users?external_id=140708",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "external_id",
									"value": "140708",
									"equals": true
								}
							]
						},
						"description": "Returns an array of user objects, by parameter external_id."
					},
					"response": []
				},
				{
					"name": "POST /api/users - archiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"Id-Email-Archiver\", jsonData.id);",
									"",
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "prasetyanto.archiver01+{{$randomInt}}@gmail.com",
									"type": "text",
									"description": "mandatory"
								},
								{
									"key": "first_name",
									"value": "test",
									"description": "mandatory for backup and archive",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "user",
									"description": "mandatory for backup and archive",
									"type": "text"
								},
								{
									"key": "plan_id",
									"value": "25",
									"type": "text",
									"description": "mandatory"
								},
								{
									"key": "time_zone",
									"value": "Hanoi",
									"description": "mandatory",
									"type": "text"
								},
								{
									"key": "seats",
									"value": "3",
									"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
									"type": "text"
								},
								{
									"key": "organization_attributes[name]",
									"value": "api-archiver{{$randomInt}}",
									"description": "mandatory for backup and archive",
									"type": "text"
								},
								{
									"key": "external_id",
									"value": "api 1",
									"description": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://sandbox.dropmyemail.com/api/users",
							"protocol": "https",
							"host": [
								"sandbox",
								"dropmyemail",
								"com"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Creates a new plans."
					},
					"response": []
				},
				{
					"name": "POST /api/users - backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"Id-Email-Backup\", jsonData.id);",
									"",
									"",
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "prasetyanto.backup01+{{$randomInt}}@gmail.com",
									"type": "text",
									"description": "mandatory"
								},
								{
									"key": "plan_id",
									"value": "89",
									"type": "text",
									"description": "mandatory"
								},
								{
									"key": "time_zone",
									"value": "Hanoi",
									"description": "mandatory",
									"type": "text"
								},
								{
									"key": "seats",
									"value": "1",
									"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
									"type": "text"
								},
								{
									"key": "first_name",
									"value": "test",
									"description": "mandatory for backup and archive",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "user",
									"description": "mandatory for backup and archive",
									"type": "text"
								},
								{
									"key": "organization_attributes[name]",
									"value": "api-backup-{{$randomInt}}",
									"description": "mandatory for backup and archive",
									"type": "text"
								},
								{
									"key": "external_id",
									"value": "api{{$randomInt}}",
									"description": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Creates a new plans."
					},
					"response": []
				},
				{
					"name": "POST /api/users - personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"Id-Email-Personal\", jsonData.id);",
									"",
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "prasetyanto.backup01+{{$randomInt}}@gmail.com",
									"type": "text",
									"description": "mandatory"
								},
								{
									"key": "plan_id",
									"value": "88",
									"type": "text",
									"description": "mandatory"
								},
								{
									"key": "time_zone",
									"value": "Hanoi",
									"description": "mandatory",
									"type": "text"
								},
								{
									"key": "seats",
									"value": "1",
									"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "first_name",
									"value": "test",
									"description": "mandatory for backup and archive",
									"type": "text"
								},
								{
									"key": "last_name",
									"value": "user",
									"description": "mandatory for backup and archive",
									"type": "text"
								},
								{
									"key": "organization_attributes[name]",
									"value": "api archiver 2",
									"description": "mandatory for backup and archive",
									"type": "text",
									"disabled": true
								},
								{
									"key": "external_id",
									"value": "api{{$randomInt}}",
									"description": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Creates a new plans."
					},
					"response": []
				},
				{
					"name": "PATCH /api/users/{id} - archiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "notification_email",
									"value": "",
									"description": "string",
									"type": "text",
									"disabled": true
								},
								{
									"key": "id",
									"value": "727",
									"description": "required, integer",
									"type": "text"
								},
								{
									"key": "external_id",
									"value": "140708",
									"description": "string",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/727",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"727"
							]
						},
						"description": "update user external id."
					},
					"response": []
				},
				{
					"name": "PATCH /api/users/{id} - backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Backup}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "notification_email",
									"value": "",
									"description": "string",
									"type": "text",
									"disabled": true
								},
								{
									"key": "id",
									"value": "728",
									"description": "required, integer",
									"type": "text"
								},
								{
									"key": "external_id",
									"value": "150708",
									"description": "string",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/728",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"728"
							]
						},
						"description": "update user external id."
					},
					"response": []
				},
				{
					"name": "PATCH /api/users/{id} - personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Personal}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "notification_email",
									"value": "",
									"description": "string",
									"type": "text",
									"disabled": true
								},
								{
									"key": "id",
									"value": "726",
									"description": "required, integer",
									"type": "text"
								},
								{
									"key": "external_id",
									"value": "160708",
									"description": "string",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/726",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"726"
							]
						},
						"description": "update user external id."
					},
					"response": []
				},
				{
					"name": "POST /api/users/{id}/update_subscription - archiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'subscription' is \" + responseBody.has(\"subscription\")] = responseBody.has(\"subscription\");",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
									"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
									"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
									"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
									"tests[\"Body matches string 'seats' is \" + responseBody.has(\"seats\")] = responseBody.has(\"seats\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "plan_id",
									"value": "25",
									"description": "required, integer",
									"type": "text"
								},
								{
									"key": "seats",
									"value": "90",
									"description": "integer",
									"type": "text"
								},
								{
									"key": "id",
									"value": "13",
									"description": "required, integer",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/727/update_subscription",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"727",
								"update_subscription"
							]
						},
						"description": "update user subscription."
					},
					"response": []
				},
				{
					"name": "POST /api/users/{id}/update_subscription - backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'subscription' is \" + responseBody.has(\"subscription\")] = responseBody.has(\"subscription\");",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
									"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
									"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
									"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
									"tests[\"Body matches string 'seats' is \" + responseBody.has(\"seats\")] = responseBody.has(\"seats\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Backup}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "plan_id",
									"value": "89",
									"description": "required, integer",
									"type": "text"
								},
								{
									"key": "seats",
									"value": "50",
									"description": "integer",
									"type": "text"
								},
								{
									"key": "id",
									"value": "13",
									"description": "required, integer",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/728/update_subscription",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"728",
								"update_subscription"
							]
						},
						"description": "update user subscription."
					},
					"response": []
				},
				{
					"name": "PUT /api/users/{id}/suspend - archiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/users/{{Id-Email-Archiver}}/suspend",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"{{Id-Email-Archiver}}",
								"suspend"
							]
						},
						"description": "suspend a user."
					},
					"response": []
				},
				{
					"name": "PUT /api/users/{id}/suspend - backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/users/{{Id-Email-Backup}}/suspend",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"{{Id-Email-Backup}}",
								"suspend"
							]
						},
						"description": "suspend a user."
					},
					"response": []
				},
				{
					"name": "PUT /api/users/{id}/suspend - personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/users/{{Id-Email-Personal}}/suspend",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"{{Id-Email-Personal}}",
								"suspend"
							]
						},
						"description": "suspend a user."
					},
					"response": []
				},
				{
					"name": "PUT /api/users/{id}/unsuspend - archiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'crypted_password' is \" + responseBody.has(\"crypted_password\")] = responseBody.has(\"crypted_password\");",
									"tests[\"Body matches string 'role' is \" + responseBody.has(\"role\")] = responseBody.has(\"role\");",
									"tests[\"Body matches string 'created_at' is \" + responseBody.has(\"created_at\")] = responseBody.has(\"created_at\");",
									"tests[\"Body matches string 'updated_at' is \" + responseBody.has(\"updated_at\")] = responseBody.has(\"updated_at\");",
									"tests[\"Body matches string 'reseller_id' is \" + responseBody.has(\"reseller_id\")] = responseBody.has(\"reseller_id\");",
									"",
									"tests[\"Body matches string 'first_name' is \" + responseBody.has(\"first_name\")] = responseBody.has(\"first_name\");",
									"tests[\"Body matches string 'last_name' is \" + responseBody.has(\"last_name\")] = responseBody.has(\"last_name\");",
									"tests[\"Body matches string 'phone_number' is \" + responseBody.has(\"phone_number\")] = responseBody.has(\"phone_number\");",
									"tests[\"Body matches string 'address_1' is \" + responseBody.has(\"address_1\")] = responseBody.has(\"address_1\");",
									"tests[\"Body matches string 'address_2' is \" + responseBody.has(\"address_2\")] = responseBody.has(\"address_2\");",
									"tests[\"Body matches string 'country' is \" + responseBody.has(\"country\")] = responseBody.has(\"country\");",
									"tests[\"Body matches string 'time_zone' is \" + responseBody.has(\"time_zone\")] = responseBody.has(\"time_zone\");",
									"tests[\"Body matches string 'postal_code' is \" + responseBody.has(\"postal_code\")] = responseBody.has(\"postal_code\");",
									"",
									"tests[\"Body matches string 'locale' is \" + responseBody.has(\"locale\")] = responseBody.has(\"locale\");",
									"tests[\"Body matches string 'external_uid' is \" + responseBody.has(\"external_uid\")] = responseBody.has(\"external_uid\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'facebook' is \" + responseBody.has(\"facebook\")] = responseBody.has(\"facebook\");",
									"",
									"tests[\"Body matches string 'google' is \" + responseBody.has(\"google\")] = responseBody.has(\"google\");",
									"tests[\"Body matches string 'region_id' is \" + responseBody.has(\"region_id\")] = responseBody.has(\"region_id\");",
									"tests[\"Body matches string 'plan_id' is \" + responseBody.has(\"plan_id\")] = responseBody.has(\"plan_id\");",
									"tests[\"Body matches string 'max_usage' is \" + responseBody.has(\"max_usage\")] = responseBody.has(\"max_usage\");",
									"tests[\"Body matches string 'current_usage' is \" + responseBody.has(\"current_usage\")] = responseBody.has(\"current_usage\");",
									"tests[\"Body matches string 'plan_expires_at' is \" + responseBody.has(\"plan_expires_at\")] = responseBody.has(\"plan_expires_at\");",
									"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
									"",
									"tests[\"Body matches string 'deactivation_reason' is \" + responseBody.has(\"deactivation_reason\")] = responseBody.has(\"deactivation_reason\");",
									"tests[\"Body matches string 'notified_expiring_at' is \" + responseBody.has(\"notified_expiring_at\")] = responseBody.has(\"notified_expiring_at\");",
									"tests[\"Body matches string 'deleted_at' is \" + responseBody.has(\"deleted_at\")] = responseBody.has(\"deleted_at\");",
									"tests[\"Body matches string 'notified_deletion_is_imminent_at' is \" + responseBody.has(\"notified_deletion_is_imminent_at\")] = responseBody.has(\"notified_deletion_is_imminent_at\");",
									"tests[\"Body matches string 'deleted_data_at' is \" + responseBody.has(\"deleted_data_at\")] = responseBody.has(\"deleted_data_at\");",
									"tests[\"Body matches string 'notify_backup' is \" + responseBody.has(\"notify_backup\")] = responseBody.has(\"notify_backup\");",
									"tests[\"Body matches string 'notify_failure' is \" + responseBody.has(\"notify_failure\")] = responseBody.has(\"notify_failure\");",
									"tests[\"Body matches string 'notify_capacity' is \" + responseBody.has(\"notify_capacity\")] = responseBody.has(\"notify_capacity\");",
									"",
									"tests[\"Body matches string 'notify_features' is \" + responseBody.has(\"notify_features\")] = responseBody.has(\"notify_features\");",
									"tests[\"Body matches string 'notification_emails' is \" + responseBody.has(\"notification_emails\")] = responseBody.has(\"notification_emails\");",
									"tests[\"Body matches string 'sign_in_count' is \" + responseBody.has(\"sign_in_count\")] = responseBody.has(\"sign_in_count\");",
									"tests[\"Body matches string 'current_sign_in_at' is \" + responseBody.has(\"current_sign_in_at\")] = responseBody.has(\"current_sign_in_at\");",
									"",
									"tests[\"Body matches string 'last_sign_in_at' is \" + responseBody.has(\"last_sign_in_at\")] = responseBody.has(\"last_sign_in_at\");",
									"tests[\"Body matches string 'current_sign_in_ip' is \" + responseBody.has(\"current_sign_in_ip\")] = responseBody.has(\"current_sign_in_ip\");",
									"tests[\"Body matches string 'last_sign_in_ip' is \" + responseBody.has(\"last_sign_in_ip\")] = responseBody.has(\"last_sign_in_ip\");",
									"tests[\"Body matches string 'reset_password_token' is \" + responseBody.has(\"reset_password_token\")] = responseBody.has(\"reset_password_token\");",
									"tests[\"Body matches string 'reset_password_sent_at' is \" + responseBody.has(\"reset_password_sent_at\")] = responseBody.has(\"reset_password_sent_at\");",
									"tests[\"Body matches string 'lock_for_update_password' is \" + responseBody.has(\"lock_for_update_password\")] = responseBody.has(\"lock_for_update_password\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'notify_tips' is \" + responseBody.has(\"notify_tips\")] = responseBody.has(\"notify_tips\");",
									"",
									"tests[\"Body matches string 'website' is \" + responseBody.has(\"website\")] = responseBody.has(\"website\");",
									"tests[\"Body matches string 'is_migrated' is \" + responseBody.has(\"is_migrated\")] = responseBody.has(\"is_migrated\");",
									"tests[\"Body matches string 'notify_backup_frequency' is \" + responseBody.has(\"notify_backup_frequency\")] = responseBody.has(\"notify_backup_frequency\");",
									"tests[\"Body matches string 'notify_failure_email_account' is \" + responseBody.has(\"notify_failure_email_account\")] = responseBody.has(\"notify_failure_email_account\");",
									"",
									"tests[\"Body matches string 'notify_success_email_account' is \" + responseBody.has(\"notify_success_email_account\")] = responseBody.has(\"notify_success_email_account\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'invitation_sent_at' is \" + responseBody.has(\"invitation_sent_at\")] = responseBody.has(\"invitation_sent_at\");",
									"tests[\"Body matches string 'pre_login_disabled' is \" + responseBody.has(\"pre_login_disabled\")] = responseBody.has(\"pre_login_disabled\");",
									"tests[\"Body matches string 'twitter' is \" + responseBody.has(\"twitter\")] = responseBody.has(\"twitter\");",
									"tests[\"Body matches string 'grace_period_start_at' is \" + responseBody.has(\"grace_period_start_at\")] = responseBody.has(\"grace_period_start_at\");",
									"tests[\"Body matches string 'encrypted_tfa' is \" + responseBody.has(\"encrypted_tfa\")] = responseBody.has(\"encrypted_tfa\");",
									"",
									"tests[\"Body matches string 'encrypted_tfa' is \" + responseBody.has(\"encrypted_tfa\")] = responseBody.has(\"encrypted_tfa\");",
									"tests[\"Body matches string 'tfa_generated_at' is \" + responseBody.has(\"tfa_generated_at\")] = responseBody.has(\"tfa_generated_at\");",
									"tests[\"Body matches string 'tfa_enabled' is \" + responseBody.has(\"tfa_enabled\")] = responseBody.has(\"tfa_enabled\");",
									"tests[\"Body matches string 'subscription_role' is \" + responseBody.has(\"subscription_role\")] = responseBody.has(\"subscription_role\");",
									"tests[\"Body matches string 'current_sign_in_country' is \" + responseBody.has(\"current_sign_in_country\")] = responseBody.has(\"current_sign_in_country\");",
									"tests[\"Body matches string 'enable_login_sent_at' is \" + responseBody.has(\"enable_login_sent_at\")] = responseBody.has(\"enable_login_sent_at\");",
									"tests[\"Body matches string 'autodiscover_sent_at' is \" + responseBody.has(\"autodiscover_sent_at\")] = responseBody.has(\"autodiscover_sent_at\");",
									"tests[\"Body matches string 'signature' is \" + responseBody.has(\"signature\")] = responseBody.has(\"signature\");",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/users/{{Id-Email-Archiver}}/unsuspend",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"{{Id-Email-Archiver}}",
								"unsuspend"
							]
						},
						"description": "suspend a user."
					},
					"response": []
				},
				{
					"name": "PUT /api/users/{id}/unsuspend - backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'crypted_password' is \" + responseBody.has(\"crypted_password\")] = responseBody.has(\"crypted_password\");",
									"tests[\"Body matches string 'role' is \" + responseBody.has(\"role\")] = responseBody.has(\"role\");",
									"tests[\"Body matches string 'created_at' is \" + responseBody.has(\"created_at\")] = responseBody.has(\"created_at\");",
									"tests[\"Body matches string 'updated_at' is \" + responseBody.has(\"updated_at\")] = responseBody.has(\"updated_at\");",
									"tests[\"Body matches string 'reseller_id' is \" + responseBody.has(\"reseller_id\")] = responseBody.has(\"reseller_id\");",
									"",
									"tests[\"Body matches string 'first_name' is \" + responseBody.has(\"first_name\")] = responseBody.has(\"first_name\");",
									"tests[\"Body matches string 'last_name' is \" + responseBody.has(\"last_name\")] = responseBody.has(\"last_name\");",
									"tests[\"Body matches string 'phone_number' is \" + responseBody.has(\"phone_number\")] = responseBody.has(\"phone_number\");",
									"tests[\"Body matches string 'address_1' is \" + responseBody.has(\"address_1\")] = responseBody.has(\"address_1\");",
									"tests[\"Body matches string 'address_2' is \" + responseBody.has(\"address_2\")] = responseBody.has(\"address_2\");",
									"tests[\"Body matches string 'country' is \" + responseBody.has(\"country\")] = responseBody.has(\"country\");",
									"tests[\"Body matches string 'time_zone' is \" + responseBody.has(\"time_zone\")] = responseBody.has(\"time_zone\");",
									"tests[\"Body matches string 'postal_code' is \" + responseBody.has(\"postal_code\")] = responseBody.has(\"postal_code\");",
									"",
									"tests[\"Body matches string 'locale' is \" + responseBody.has(\"locale\")] = responseBody.has(\"locale\");",
									"tests[\"Body matches string 'external_uid' is \" + responseBody.has(\"external_uid\")] = responseBody.has(\"external_uid\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'facebook' is \" + responseBody.has(\"facebook\")] = responseBody.has(\"facebook\");",
									"",
									"tests[\"Body matches string 'google' is \" + responseBody.has(\"google\")] = responseBody.has(\"google\");",
									"tests[\"Body matches string 'region_id' is \" + responseBody.has(\"region_id\")] = responseBody.has(\"region_id\");",
									"tests[\"Body matches string 'plan_id' is \" + responseBody.has(\"plan_id\")] = responseBody.has(\"plan_id\");",
									"tests[\"Body matches string 'max_usage' is \" + responseBody.has(\"max_usage\")] = responseBody.has(\"max_usage\");",
									"tests[\"Body matches string 'current_usage' is \" + responseBody.has(\"current_usage\")] = responseBody.has(\"current_usage\");",
									"tests[\"Body matches string 'plan_expires_at' is \" + responseBody.has(\"plan_expires_at\")] = responseBody.has(\"plan_expires_at\");",
									"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
									"",
									"tests[\"Body matches string 'deactivation_reason' is \" + responseBody.has(\"deactivation_reason\")] = responseBody.has(\"deactivation_reason\");",
									"tests[\"Body matches string 'notified_expiring_at' is \" + responseBody.has(\"notified_expiring_at\")] = responseBody.has(\"notified_expiring_at\");",
									"tests[\"Body matches string 'deleted_at' is \" + responseBody.has(\"deleted_at\")] = responseBody.has(\"deleted_at\");",
									"tests[\"Body matches string 'notified_deletion_is_imminent_at' is \" + responseBody.has(\"notified_deletion_is_imminent_at\")] = responseBody.has(\"notified_deletion_is_imminent_at\");",
									"tests[\"Body matches string 'deleted_data_at' is \" + responseBody.has(\"deleted_data_at\")] = responseBody.has(\"deleted_data_at\");",
									"tests[\"Body matches string 'notify_backup' is \" + responseBody.has(\"notify_backup\")] = responseBody.has(\"notify_backup\");",
									"tests[\"Body matches string 'notify_failure' is \" + responseBody.has(\"notify_failure\")] = responseBody.has(\"notify_failure\");",
									"tests[\"Body matches string 'notify_capacity' is \" + responseBody.has(\"notify_capacity\")] = responseBody.has(\"notify_capacity\");",
									"",
									"tests[\"Body matches string 'notify_features' is \" + responseBody.has(\"notify_features\")] = responseBody.has(\"notify_features\");",
									"tests[\"Body matches string 'notification_emails' is \" + responseBody.has(\"notification_emails\")] = responseBody.has(\"notification_emails\");",
									"tests[\"Body matches string 'sign_in_count' is \" + responseBody.has(\"sign_in_count\")] = responseBody.has(\"sign_in_count\");",
									"tests[\"Body matches string 'current_sign_in_at' is \" + responseBody.has(\"current_sign_in_at\")] = responseBody.has(\"current_sign_in_at\");",
									"",
									"tests[\"Body matches string 'last_sign_in_at' is \" + responseBody.has(\"last_sign_in_at\")] = responseBody.has(\"last_sign_in_at\");",
									"tests[\"Body matches string 'current_sign_in_ip' is \" + responseBody.has(\"current_sign_in_ip\")] = responseBody.has(\"current_sign_in_ip\");",
									"tests[\"Body matches string 'last_sign_in_ip' is \" + responseBody.has(\"last_sign_in_ip\")] = responseBody.has(\"last_sign_in_ip\");",
									"tests[\"Body matches string 'reset_password_token' is \" + responseBody.has(\"reset_password_token\")] = responseBody.has(\"reset_password_token\");",
									"tests[\"Body matches string 'reset_password_sent_at' is \" + responseBody.has(\"reset_password_sent_at\")] = responseBody.has(\"reset_password_sent_at\");",
									"tests[\"Body matches string 'lock_for_update_password' is \" + responseBody.has(\"lock_for_update_password\")] = responseBody.has(\"lock_for_update_password\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'notify_tips' is \" + responseBody.has(\"notify_tips\")] = responseBody.has(\"notify_tips\");",
									"",
									"tests[\"Body matches string 'website' is \" + responseBody.has(\"website\")] = responseBody.has(\"website\");",
									"tests[\"Body matches string 'is_migrated' is \" + responseBody.has(\"is_migrated\")] = responseBody.has(\"is_migrated\");",
									"tests[\"Body matches string 'notify_backup_frequency' is \" + responseBody.has(\"notify_backup_frequency\")] = responseBody.has(\"notify_backup_frequency\");",
									"tests[\"Body matches string 'notify_failure_email_account' is \" + responseBody.has(\"notify_failure_email_account\")] = responseBody.has(\"notify_failure_email_account\");",
									"",
									"tests[\"Body matches string 'notify_success_email_account' is \" + responseBody.has(\"notify_success_email_account\")] = responseBody.has(\"notify_success_email_account\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'invitation_sent_at' is \" + responseBody.has(\"invitation_sent_at\")] = responseBody.has(\"invitation_sent_at\");",
									"tests[\"Body matches string 'pre_login_disabled' is \" + responseBody.has(\"pre_login_disabled\")] = responseBody.has(\"pre_login_disabled\");",
									"tests[\"Body matches string 'twitter' is \" + responseBody.has(\"twitter\")] = responseBody.has(\"twitter\");",
									"tests[\"Body matches string 'grace_period_start_at' is \" + responseBody.has(\"grace_period_start_at\")] = responseBody.has(\"grace_period_start_at\");",
									"tests[\"Body matches string 'encrypted_tfa' is \" + responseBody.has(\"encrypted_tfa\")] = responseBody.has(\"encrypted_tfa\");",
									"",
									"tests[\"Body matches string 'encrypted_tfa' is \" + responseBody.has(\"encrypted_tfa\")] = responseBody.has(\"encrypted_tfa\");",
									"tests[\"Body matches string 'tfa_generated_at' is \" + responseBody.has(\"tfa_generated_at\")] = responseBody.has(\"tfa_generated_at\");",
									"tests[\"Body matches string 'tfa_enabled' is \" + responseBody.has(\"tfa_enabled\")] = responseBody.has(\"tfa_enabled\");",
									"tests[\"Body matches string 'subscription_role' is \" + responseBody.has(\"subscription_role\")] = responseBody.has(\"subscription_role\");",
									"tests[\"Body matches string 'current_sign_in_country' is \" + responseBody.has(\"current_sign_in_country\")] = responseBody.has(\"current_sign_in_country\");",
									"tests[\"Body matches string 'enable_login_sent_at' is \" + responseBody.has(\"enable_login_sent_at\")] = responseBody.has(\"enable_login_sent_at\");",
									"tests[\"Body matches string 'autodiscover_sent_at' is \" + responseBody.has(\"autodiscover_sent_at\")] = responseBody.has(\"autodiscover_sent_at\");",
									"tests[\"Body matches string 'signature' is \" + responseBody.has(\"signature\")] = responseBody.has(\"signature\");",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/users/{{Id-Email-Backup}}/unsuspend",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"{{Id-Email-Backup}}",
								"unsuspend"
							]
						},
						"description": "suspend a user."
					},
					"response": []
				},
				{
					"name": "PUT /api/users/{id}/unsuspend - personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'crypted_password' is \" + responseBody.has(\"crypted_password\")] = responseBody.has(\"crypted_password\");",
									"tests[\"Body matches string 'role' is \" + responseBody.has(\"role\")] = responseBody.has(\"role\");",
									"tests[\"Body matches string 'created_at' is \" + responseBody.has(\"created_at\")] = responseBody.has(\"created_at\");",
									"tests[\"Body matches string 'updated_at' is \" + responseBody.has(\"updated_at\")] = responseBody.has(\"updated_at\");",
									"tests[\"Body matches string 'reseller_id' is \" + responseBody.has(\"reseller_id\")] = responseBody.has(\"reseller_id\");",
									"",
									"tests[\"Body matches string 'first_name' is \" + responseBody.has(\"first_name\")] = responseBody.has(\"first_name\");",
									"tests[\"Body matches string 'last_name' is \" + responseBody.has(\"last_name\")] = responseBody.has(\"last_name\");",
									"tests[\"Body matches string 'phone_number' is \" + responseBody.has(\"phone_number\")] = responseBody.has(\"phone_number\");",
									"tests[\"Body matches string 'address_1' is \" + responseBody.has(\"address_1\")] = responseBody.has(\"address_1\");",
									"tests[\"Body matches string 'address_2' is \" + responseBody.has(\"address_2\")] = responseBody.has(\"address_2\");",
									"tests[\"Body matches string 'country' is \" + responseBody.has(\"country\")] = responseBody.has(\"country\");",
									"tests[\"Body matches string 'time_zone' is \" + responseBody.has(\"time_zone\")] = responseBody.has(\"time_zone\");",
									"tests[\"Body matches string 'postal_code' is \" + responseBody.has(\"postal_code\")] = responseBody.has(\"postal_code\");",
									"",
									"tests[\"Body matches string 'locale' is \" + responseBody.has(\"locale\")] = responseBody.has(\"locale\");",
									"tests[\"Body matches string 'external_uid' is \" + responseBody.has(\"external_uid\")] = responseBody.has(\"external_uid\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'facebook' is \" + responseBody.has(\"facebook\")] = responseBody.has(\"facebook\");",
									"",
									"tests[\"Body matches string 'google' is \" + responseBody.has(\"google\")] = responseBody.has(\"google\");",
									"tests[\"Body matches string 'region_id' is \" + responseBody.has(\"region_id\")] = responseBody.has(\"region_id\");",
									"tests[\"Body matches string 'plan_id' is \" + responseBody.has(\"plan_id\")] = responseBody.has(\"plan_id\");",
									"tests[\"Body matches string 'max_usage' is \" + responseBody.has(\"max_usage\")] = responseBody.has(\"max_usage\");",
									"tests[\"Body matches string 'current_usage' is \" + responseBody.has(\"current_usage\")] = responseBody.has(\"current_usage\");",
									"tests[\"Body matches string 'plan_expires_at' is \" + responseBody.has(\"plan_expires_at\")] = responseBody.has(\"plan_expires_at\");",
									"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
									"",
									"tests[\"Body matches string 'deactivation_reason' is \" + responseBody.has(\"deactivation_reason\")] = responseBody.has(\"deactivation_reason\");",
									"tests[\"Body matches string 'notified_expiring_at' is \" + responseBody.has(\"notified_expiring_at\")] = responseBody.has(\"notified_expiring_at\");",
									"tests[\"Body matches string 'deleted_at' is \" + responseBody.has(\"deleted_at\")] = responseBody.has(\"deleted_at\");",
									"tests[\"Body matches string 'notified_deletion_is_imminent_at' is \" + responseBody.has(\"notified_deletion_is_imminent_at\")] = responseBody.has(\"notified_deletion_is_imminent_at\");",
									"tests[\"Body matches string 'deleted_data_at' is \" + responseBody.has(\"deleted_data_at\")] = responseBody.has(\"deleted_data_at\");",
									"tests[\"Body matches string 'notify_backup' is \" + responseBody.has(\"notify_backup\")] = responseBody.has(\"notify_backup\");",
									"tests[\"Body matches string 'notify_failure' is \" + responseBody.has(\"notify_failure\")] = responseBody.has(\"notify_failure\");",
									"tests[\"Body matches string 'notify_capacity' is \" + responseBody.has(\"notify_capacity\")] = responseBody.has(\"notify_capacity\");",
									"",
									"tests[\"Body matches string 'notify_features' is \" + responseBody.has(\"notify_features\")] = responseBody.has(\"notify_features\");",
									"tests[\"Body matches string 'notification_emails' is \" + responseBody.has(\"notification_emails\")] = responseBody.has(\"notification_emails\");",
									"tests[\"Body matches string 'sign_in_count' is \" + responseBody.has(\"sign_in_count\")] = responseBody.has(\"sign_in_count\");",
									"tests[\"Body matches string 'current_sign_in_at' is \" + responseBody.has(\"current_sign_in_at\")] = responseBody.has(\"current_sign_in_at\");",
									"",
									"tests[\"Body matches string 'last_sign_in_at' is \" + responseBody.has(\"last_sign_in_at\")] = responseBody.has(\"last_sign_in_at\");",
									"tests[\"Body matches string 'current_sign_in_ip' is \" + responseBody.has(\"current_sign_in_ip\")] = responseBody.has(\"current_sign_in_ip\");",
									"tests[\"Body matches string 'last_sign_in_ip' is \" + responseBody.has(\"last_sign_in_ip\")] = responseBody.has(\"last_sign_in_ip\");",
									"tests[\"Body matches string 'reset_password_token' is \" + responseBody.has(\"reset_password_token\")] = responseBody.has(\"reset_password_token\");",
									"tests[\"Body matches string 'reset_password_sent_at' is \" + responseBody.has(\"reset_password_sent_at\")] = responseBody.has(\"reset_password_sent_at\");",
									"tests[\"Body matches string 'lock_for_update_password' is \" + responseBody.has(\"lock_for_update_password\")] = responseBody.has(\"lock_for_update_password\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'notify_tips' is \" + responseBody.has(\"notify_tips\")] = responseBody.has(\"notify_tips\");",
									"",
									"tests[\"Body matches string 'website' is \" + responseBody.has(\"website\")] = responseBody.has(\"website\");",
									"tests[\"Body matches string 'is_migrated' is \" + responseBody.has(\"is_migrated\")] = responseBody.has(\"is_migrated\");",
									"tests[\"Body matches string 'notify_backup_frequency' is \" + responseBody.has(\"notify_backup_frequency\")] = responseBody.has(\"notify_backup_frequency\");",
									"tests[\"Body matches string 'notify_failure_email_account' is \" + responseBody.has(\"notify_failure_email_account\")] = responseBody.has(\"notify_failure_email_account\");",
									"",
									"tests[\"Body matches string 'notify_success_email_account' is \" + responseBody.has(\"notify_success_email_account\")] = responseBody.has(\"notify_success_email_account\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'invitation_sent_at' is \" + responseBody.has(\"invitation_sent_at\")] = responseBody.has(\"invitation_sent_at\");",
									"tests[\"Body matches string 'pre_login_disabled' is \" + responseBody.has(\"pre_login_disabled\")] = responseBody.has(\"pre_login_disabled\");",
									"tests[\"Body matches string 'twitter' is \" + responseBody.has(\"twitter\")] = responseBody.has(\"twitter\");",
									"tests[\"Body matches string 'grace_period_start_at' is \" + responseBody.has(\"grace_period_start_at\")] = responseBody.has(\"grace_period_start_at\");",
									"tests[\"Body matches string 'encrypted_tfa' is \" + responseBody.has(\"encrypted_tfa\")] = responseBody.has(\"encrypted_tfa\");",
									"",
									"tests[\"Body matches string 'encrypted_tfa' is \" + responseBody.has(\"encrypted_tfa\")] = responseBody.has(\"encrypted_tfa\");",
									"tests[\"Body matches string 'tfa_generated_at' is \" + responseBody.has(\"tfa_generated_at\")] = responseBody.has(\"tfa_generated_at\");",
									"tests[\"Body matches string 'tfa_enabled' is \" + responseBody.has(\"tfa_enabled\")] = responseBody.has(\"tfa_enabled\");",
									"tests[\"Body matches string 'subscription_role' is \" + responseBody.has(\"subscription_role\")] = responseBody.has(\"subscription_role\");",
									"tests[\"Body matches string 'current_sign_in_country' is \" + responseBody.has(\"current_sign_in_country\")] = responseBody.has(\"current_sign_in_country\");",
									"tests[\"Body matches string 'enable_login_sent_at' is \" + responseBody.has(\"enable_login_sent_at\")] = responseBody.has(\"enable_login_sent_at\");",
									"tests[\"Body matches string 'autodiscover_sent_at' is \" + responseBody.has(\"autodiscover_sent_at\")] = responseBody.has(\"autodiscover_sent_at\");",
									"tests[\"Body matches string 'signature' is \" + responseBody.has(\"signature\")] = responseBody.has(\"signature\");",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/users/{{Id-Email-Personal}}/unsuspend",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"{{Id-Email-Personal}}",
								"unsuspend"
							]
						},
						"description": "suspend a user."
					},
					"response": []
				},
				{
					"name": "DELETE /api/users/{id}/unsubscribe",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "727",
									"description": "required, integer",
									"type": "text",
									"disabled": true
								},
								{
									"key": "seats",
									"value": "",
									"description": "integer",
									"type": "text",
									"disabled": true
								},
								{
									"key": "plan_id",
									"value": "",
									"description": "string",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/727/unsubscribe",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"727",
								"unsubscribe"
							]
						},
						"description": "re-active unsubscribe user."
					},
					"response": []
				},
				{
					"name": "PUT /api/users/{id}/reactivate_unsubscribe - archiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "plan_id",
									"value": "25",
									"type": "text"
								},
								{
									"key": "seats",
									"value": "11",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/727/reactive_unsubscribe",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"727",
								"reactive_unsubscribe"
							]
						},
						"description": "Creates a new plans."
					},
					"response": []
				},
				{
					"name": "PUT /api/users/{id}/reactivate_unsubscribe copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "plan_id",
									"value": "25",
									"type": "text"
								},
								{
									"key": "seats",
									"value": "11",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/users/{{Id-Email-Archiver}}/reactive_unsubscribe",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"{{Id-Email-Archiver}}",
								"reactive_unsubscribe"
							]
						},
						"description": "Creates a new plans."
					},
					"response": []
				}
			]
		},
		{
			"name": "accounts",
			"description": "",
			"item": [
				{
					"name": "GET /api/deleted_accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Backup}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/accounts/deleted_accounts",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts",
								"deleted_accounts"
							]
						},
						"description": "Returns an array of accounts"
					},
					"response": []
				},
				{
					"name": "GET /api/accounts/deactivated_accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/accounts/deactivated_accounts",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts",
								"deactivated_accounts"
							]
						},
						"description": "Returns an array of user objects."
					},
					"response": []
				},
				{
					"name": "GET /api/accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/accounts",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts"
							]
						},
						"description": "Returns an array of accounts"
					},
					"response": []
				},
				{
					"name": "POST /api/accounts - archiver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 15000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
									"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
									"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
									"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
									"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
									"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
									"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/accounts?email=prasetyanto.dheka01%2B{{$randomInt}}%40gmail.com&password=1234asdF",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts"
							],
							"query": [
								{
									"key": "email",
									"value": "prasetyanto.dheka01%2B{{$randomInt}}%40gmail.com",
									"equals": true
								},
								{
									"key": "password",
									"value": "1234asdF",
									"equals": true
								}
							]
						},
						"description": "Add an email account to backup"
					},
					"response": []
				},
				{
					"name": "POST /api/accounts - backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"Id-Email-Backup-Delete\", jsonData.id);",
									"",
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 15000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
									"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
									"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
									"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
									"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
									"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
									"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Backup}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/accounts?email=prasetyanto.dheka01%2B{{$randomInt}}%40gmail.com&password=1234asdF",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts"
							],
							"query": [
								{
									"key": "email",
									"value": "prasetyanto.dheka01%2B{{$randomInt}}%40gmail.com",
									"equals": true
								},
								{
									"key": "password",
									"value": "1234asdF",
									"equals": true
								}
							]
						},
						"description": "Add an email account to backup"
					},
					"response": []
				},
				{
					"name": "PUT /api/accounts/{id}/deactivate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 15000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
									"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
									"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
									"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
									"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
									"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
									"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/accounts/652/deactivate",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts",
								"652",
								"deactivate"
							]
						},
						"description": "Returns an array of user objects."
					},
					"response": []
				},
				{
					"name": "PUT /api/accounts/{id}/reactivate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 15000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
									"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
									"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
									"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
									"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
									"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
									"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/accounts/652/reactivate",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts",
								"652",
								"reactivate"
							]
						},
						"description": "Returns an array of user objects."
					},
					"response": []
				},
				{
					"name": "PATCH /api/accounts/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 15000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
									"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
									"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
									"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
									"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
									"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
									"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
									"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
									"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
									"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
									"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
									"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
									"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
									"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
									"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
									"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
									"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
									"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
									"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
									"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
									"",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "prasetyanto.dheka01+2342@gmail.com",
									"description": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1234asdF",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/accounts/981",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts",
								"981"
							]
						},
						"description": "Add an email account to backup"
					},
					"response": []
				},
				{
					"name": "DELETE /api/accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Backup}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/accounts/{{Id-Email-Backup-Delete}}",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts",
								"{{Id-Email-Backup-Delete}}"
							]
						},
						"description": "Returns an array of accounts"
					},
					"response": []
				}
			]
		},
		{
			"name": "plans",
			"item": [
				{
					"name": "POST /api/plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'name' is \" + responseBody.has(\"name\")] = responseBody.has(\"name\");",
									"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
									"tests[\"Body matches string 'data_storage' is \" + responseBody.has(\"data_storage\")] = responseBody.has(\"data_storage\");",
									"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
									"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
									"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/plans?name=res personal api&product_type=res_personal&amount=1.0&data_storage=5&currency=USD&periodicity=monthly",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"plans"
							],
							"query": [
								{
									"key": "name",
									"value": "res personal api",
									"equals": true
								},
								{
									"key": "product_type",
									"value": "res_personal",
									"equals": true
								},
								{
									"key": "amount",
									"value": "1.0",
									"equals": true
								},
								{
									"key": "data_storage",
									"value": "5",
									"equals": true
								},
								{
									"key": "currency",
									"value": "USD",
									"equals": true
								},
								{
									"key": "periodicity",
									"value": "monthly",
									"equals": true
								}
							]
						},
						"description": "Creates a new plans."
					},
					"response": []
				},
				{
					"name": "GET /api/plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'name' is \" + responseBody.has(\"name\")] = responseBody.has(\"name\");",
									"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
									"tests[\"Body matches string 'data_storage' is \" + responseBody.has(\"data_storage\")] = responseBody.has(\"data_storage\");",
									"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
									"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
									"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/plans",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"plans"
							]
						},
						"description": "Return an array of plans."
					},
					"response": []
				}
			]
		},
		{
			"name": "journals",
			"description": "",
			"item": [
				{
					"name": "GET /api/journals",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/journals",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"journals"
							]
						},
						"description": "Generate single sign on link"
					},
					"response": []
				},
				{
					"name": "POST /api/journals",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Archiver}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/journals",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"journals"
							]
						},
						"description": "Generate single sign on link"
					},
					"response": []
				},
				{
					"name": "PATCH /api/journals",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "dme.jmeter.backup@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qwe!@",
									"type": "text"
								},
								{
									"key": "id",
									"value": "{{Id-Journal}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{hosts}}/api/journals{{Id-Journal}}",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"journals{{Id-Journal}}"
							]
						},
						"description": "Generate single sign on link"
					},
					"response": []
				},
				{
					"name": "https://mailer.dropmyemail.com/api/v1/journal_recipients",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "e8715570-3af4-4043-977f-4e5d02b8ce8b"
							},
							{
								"key": "X-Access-Token",
								"value": "881dd150-3547-4f4c-9e1b-f569dda7916a"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user",
									"value": "email.account.01",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123123123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://mailer.dropmyemail.com/api/v1/journal_recipients",
							"protocol": "https",
							"host": [
								"mailer",
								"dropmyemail",
								"com"
							],
							"path": [
								"api",
								"v1",
								"journal_recipients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "countries, timezones, locales copy",
			"item": [
				{
					"name": "02010101- GET /api/countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'country_code' is \" + responseBody.has(\"country_code\")] = responseBody.has(\"country_code\");",
									"tests[\"Body matches string 'country_name' is \" + responseBody.has(\"country_name\")] = responseBody.has(\"country_name\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/countries",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"countries"
							]
						},
						"description": "GET /api/countries"
					},
					"response": []
				},
				{
					"name": "02010102- GET /api/timezones",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'zone_id' is \" + responseBody.has(\"zone_id\")] = responseBody.has(\"zone_id\");",
									"tests[\"Body matches string 'zone_name' is \" + responseBody.has(\"zone_name\")] = responseBody.has(\"zone_name\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/timezones",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"timezones"
							]
						},
						"description": "GET /api/timezones"
					},
					"response": []
				},
				{
					"name": "02010103 - GET /api/locales",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"tests[\"Body matches string 'japanese' is \" + responseBody.has(\"japanese\")] = responseBody.has(\"japanese\");",
									"tests[\"Body matches string 'english' is \" + responseBody.has(\"english\")] = responseBody.has(\"english\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/locales",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"locales"
							]
						},
						"description": "GET /api/locales"
					},
					"response": []
				}
			]
		}
	]
}