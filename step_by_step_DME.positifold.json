{
	"info": {
		"name": "step_by_step_DME_newman",
		"_postman_id": "36da6b5b-b3ff-208d-bef0-fddd803c0ea8",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Countries, Timezones, Locales",
			"item": [
				{
					"name": "02010101- GET /api/countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
									"",
									"",
									"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
									"tests[\"Body matches string 'country_code' is \" + responseBody.has(\"country_code\")] = responseBody.has(\"country_code\");",
									"tests[\"Body matches string 'country_name' is \" + responseBody.has(\"country_name\")] = responseBody.has(\"country_name\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hosts}}/api/countries",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"countries"
							]
						},
						"description": "GET /api/countries"
					},
					"response": []
				},
				{
					"name": "02010102- GET /api/timezones",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
									"",
									"",
									"tests[\"Body matches string 'zone_id' is \" + responseBody.has(\"zone_id\")] = responseBody.has(\"zone_id\");",
									"tests[\"Body matches string 'zone_name' is \" + responseBody.has(\"zone_name\")] = responseBody.has(\"zone_name\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hosts}}/api/timezones",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"timezones"
							]
						},
						"description": "GET /api/timezones"
					},
					"response": []
				},
				{
					"name": "02010103 - GET /api/locales",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
									"",
									"",
									"tests[\"Body matches string 'japanese' is \" + responseBody.has(\"japanese\")] = responseBody.has(\"japanese\");",
									"tests[\"Body matches string 'english' is \" + responseBody.has(\"english\")] = responseBody.has(\"english\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"var res = typeof(jsonData) === \"object\";",
									"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hosts}}/api/locales",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"locales"
							]
						},
						"description": "GET /api/locales"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reseller",
			"description": "All api reseller",
			"item": [
				{
					"name": "plans",
					"item": [
						{
							"name": "POST /api/plans - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"Id-Plan-Personal\", jsonData.id);",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'name' is \" + responseBody.has(\"name\")] = responseBody.has(\"name\");",
											"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
											"tests[\"Body matches string 'data_storage' is \" + responseBody.has(\"data_storage\")] = responseBody.has(\"data_storage\");",
											"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
											"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
											"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "res-personal-api",
											"type": "text"
										},
										{
											"key": "product_type",
											"value": "res_personal",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "data_storage",
											"value": "6",
											"type": "text"
										},
										{
											"key": "currency",
											"value": "USD",
											"type": "text"
										},
										{
											"key": "periodicity",
											"value": "monthly",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/plans",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"plans"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "POST /api/plans - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"Id-Plan-Backup\", jsonData.id);",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'name' is \" + responseBody.has(\"name\")] = responseBody.has(\"name\");",
											"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
											"tests[\"Body matches string 'data_storage' is \" + responseBody.has(\"data_storage\")] = responseBody.has(\"data_storage\");",
											"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
											"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
											"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res;",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"type": "text",
											"value": "API_backup"
										},
										{
											"key": "product_type",
											"type": "text",
											"value": "res_backup"
										},
										{
											"key": "amount",
											"type": "text",
											"value": "1.0"
										},
										{
											"key": "data_storage",
											"type": "text",
											"value": "777"
										},
										{
											"key": "currency",
											"type": "text",
											"value": "USD"
										},
										{
											"key": "periodicity",
											"type": "text",
											"value": "monthly"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/plans",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"plans"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "POST /api/plans - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"Id-Plan-Archiver\", jsonData.id);",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'name' is \" + responseBody.has(\"name\")] = responseBody.has(\"name\");",
											"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
											"tests[\"Body matches string 'data_storage' is \" + responseBody.has(\"data_storage\")] = responseBody.has(\"data_storage\");",
											"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
											"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
											"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "API_Archiver",
											"type": "text"
										},
										{
											"key": "product_type",
											"value": "res_archive",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "data_storage",
											"value": "777",
											"type": "text"
										},
										{
											"key": "currency",
											"value": "USD",
											"type": "text"
										},
										{
											"key": "periodicity",
											"value": "monthly",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/plans",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"plans"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "GET /api/plans",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'name' is \" + responseBody.has(\"name\")] = responseBody.has(\"name\");",
											"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
											"tests[\"Body matches string 'data_storage' is \" + responseBody.has(\"data_storage\")] = responseBody.has(\"data_storage\");",
											"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
											"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
											"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
											"",
											"var id_personal = pm.environment.get(\"Id-Plan-Personal\")",
											"var id_backup = pm.environment.get(\"Id-Plan-Backup\")",
											"var id_archiver = pm.environment.get(\"Id-Plan-Archiver\")",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"Theres new plans personal created \"] = jsonData.id = id_personal;",
											"tests[\"Theres new plans backup created \"] = jsonData.id = id_backup;",
											"tests[\"Theres new plans archiver created \"] = jsonData.id = id_archiver;",
											"",
											"",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/plans",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"plans"
									]
								},
								"description": "Return an array of plans."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "users",
					"item": [
						{
							"name": "POST /api/users - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"X-Access-Token-Archiver\", jsonData.authentication_token);",
											"postman.setEnvironmentVariable(\"Id-User-Archiver\", jsonData.id);",
											"postman.setEnvironmentVariable(\"Email-User-Archiver\", jsonData.email);",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"console.log(responseBody);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"description": "mandatory",
											"key": "email",
											"type": "text",
											"value": "prasetyanto.archiver01+{{$timestamp}}@gmail.com"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "first_name",
											"type": "text",
											"value": "test"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "last_name",
											"type": "text",
											"value": "user"
										},
										{
											"description": "mandatory",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Archiver}}"
										},
										{
											"description": "mandatory",
											"key": "time_zone",
											"type": "text",
											"value": "Hanoi"
										},
										{
											"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
											"key": "seats",
											"type": "text",
											"value": "3"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "organization_attributes[name]",
											"type": "text",
											"value": "api-archiver{{$timestamp}}"
										},
										{
											"key": "external_id",
											"type": "text",
											"value": "archiver_725",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "POST /api/users - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"X-Access-Token-Backup\", jsonData.authentication_token);",
											"postman.setEnvironmentVariable(\"Id-User-Backup\", jsonData.id);",
											"postman.setEnvironmentVariable(\"Email-User-Backup\", jsonData.email);",
											"",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"console.log(responseBody);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"description": "mandatory",
											"key": "email",
											"type": "text",
											"value": "prasetyanto.backup01+{{$timestamp}}@gmail.com"
										},
										{
											"description": "mandatory",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Backup}}"
										},
										{
											"description": "mandatory",
											"key": "time_zone",
											"type": "text",
											"value": "Hanoi"
										},
										{
											"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
											"key": "seats",
											"type": "text",
											"value": "1"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "first_name",
											"type": "text",
											"value": "test"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "last_name",
											"type": "text",
											"value": "user"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "organization_attributes[name]",
											"type": "text",
											"value": "api-backup-{{$timestamp}}"
										},
										{
											"key": "external_id",
											"type": "text",
											"value": "api{{$randomInt}}",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "POST /api/users - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"X-Access-Token-Personal\", jsonData.authentication_token);",
											"postman.setEnvironmentVariable(\"Id-User-Personal\", jsonData.id);",
											"postman.setEnvironmentVariable(\"Email-User-Personal\", jsonData.email);",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"description": "mandatory",
											"key": "email",
											"type": "text",
											"value": "prasetyanto.personal01+{{$timestamp}}@gmail.com"
										},
										{
											"description": "mandatory",
											"key": "plan_id",
											"type": "text",
											"value": "{{Static-Plan}}"
										},
										{
											"description": "mandatory",
											"key": "time_zone",
											"type": "text",
											"value": "Hanoi"
										},
										{
											"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
											"key": "seats",
											"type": "text",
											"value": "1",
											"disabled": true
										},
										{
											"description": "mandatory for backup and archive",
											"key": "first_name",
											"type": "text",
											"value": "test"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "last_name",
											"type": "text",
											"value": "user"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "organization_attributes[name]",
											"type": "text",
											"value": "api archiver 2",
											"disabled": true
										},
										{
											"key": "external_id",
											"type": "text",
											"value": "api{{$randomInt}}",
											"disabled": true
										},
										{
											"key": "send_sign_in_details",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "GET /api/users - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var id_user_personal = pm.environment.get(\"Id-User-Personal\")",
											"var id_user_backup = pm.environment.get(\"Id-User-Backup\")",
											"var id_user_archiver = pm.environment.get(\"Id-User-Archiver\")",
											"tests[\"Theres new user personal created \"] = jsonData.id = id_user_personal;",
											"tests[\"Theres new user backup created \"] = jsonData.id = id_user_backup;",
											"tests[\"Theres new user archiver created \"] = jsonData.id = id_user_archiver;",
											"",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Returns an array of user objects."
							},
							"response": []
						},
						{
							"name": "GET /api/users - by params : email",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"email is prasetyanto.archiver01+1515999453@gmail.com is \" + jsonData.email.has(\"prasetyanto.archiver01+1515999453@gmail.com\")] = jsonData.email.has(\"prasetyanto.archiver01+1515999453@gmail.com\")",
											"",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users?email=prasetyanto.archiver01%2B1515999453%40gmail.com",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "prasetyanto.archiver01%2B1515999453%40gmail.com",
											"equals": true
										}
									]
								},
								"description": "Returns an array of user objects, by parameter email."
							},
							"response": []
						},
						{
							"name": "GET /api/users - by params : external_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"email is prasetyanto.archiver01+1515999889@gmail.com is \" + jsonData.email.has(\"prasetyanto.archiver01+1515999889@gmail.com.com\")] = jsonData.email.has(\"prasetyanto.archiver01+1515999889@gmail.com\")",
											"",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users?external_id=archiver_725",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "external_id",
											"value": "archiver_725",
											"equals": true
										}
									]
								},
								"description": "Returns an array of user objects, by parameter external_id."
							},
							"response": []
						},
						{
							"name": "POST /api/users/{id}/update_subscription - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'subscription' is \" + responseBody.has(\"subscription\")] = responseBody.has(\"subscription\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
											"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
											"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
											"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
											"tests[\"Body matches string 'seats' is \" + responseBody.has(\"seats\")] = responseBody.has(\"seats\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Archiver}}"
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "12"
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "13",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/update_subscription",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"update_subscription"
									]
								},
								"description": "update user subscription."
							},
							"response": []
						},
						{
							"name": "POST /api/users/{id}/update_subscription - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'subscription' is \" + responseBody.has(\"subscription\")] = responseBody.has(\"subscription\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
											"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
											"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
											"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
											"tests[\"Body matches string 'seats' is \" + responseBody.has(\"seats\")] = responseBody.has(\"seats\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Backup}}"
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "12"
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "13",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/update_subscription",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"update_subscription"
									]
								},
								"description": "update user subscription."
							},
							"response": []
						},
						{
							"name": "POST /api/users/{id}/update_subscription - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'subscription' is \" + responseBody.has(\"subscription\")] = responseBody.has(\"subscription\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'periodicity' is \" + responseBody.has(\"periodicity\")] = responseBody.has(\"periodicity\");",
											"tests[\"Body matches string 'amount' is \" + responseBody.has(\"amount\")] = responseBody.has(\"amount\");",
											"tests[\"Body matches string 'currency' is \" + responseBody.has(\"currency\")] = responseBody.has(\"currency\");",
											"tests[\"Body matches string 'product_type' is \" + responseBody.has(\"product_type\")] = responseBody.has(\"product_type\");",
											"tests[\"Body matches string 'seats' is \" + responseBody.has(\"seats\")] = responseBody.has(\"seats\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Personal}}"
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "50",
											"disabled": true
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "13",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/update_subscription",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"update_subscription"
									]
								},
								"description": "update user subscription."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/suspend - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/suspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"suspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/suspend - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/suspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"suspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/suspend - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/suspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"suspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/unsuspend - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/unsuspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"unsuspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/unsuspend - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/unsuspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"unsuspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/unsuspend - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/unsuspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"unsuspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/{id}/unsubscribe - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "727",
											"disabled": true
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "string",
											"key": "plan_id",
											"type": "text",
											"value": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"unsubscribe"
									]
								},
								"description": "re-active unsubscribe user."
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/{id}/unsubscribe - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "727",
											"disabled": true
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "string",
											"key": "plan_id",
											"type": "text",
											"value": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"unsubscribe"
									]
								},
								"description": "re-active unsubscribe user."
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/{id}/unsubscribe - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "727",
											"disabled": true
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "string",
											"key": "plan_id",
											"type": "text",
											"value": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"unsubscribe"
									]
								},
								"description": "re-active unsubscribe user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/reactivate_unsubscribe - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"console.log(responseBody);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "plan_id",
											"type": "text",
											"value": "25",
											"disabled": true
										},
										{
											"key": "seats",
											"type": "text",
											"value": "11",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/reactive_unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"reactive_unsubscribe"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/reactivate_unsubscribe - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "plan_id",
											"type": "text",
											"value": "25",
											"disabled": true
										},
										{
											"key": "seats",
											"type": "text",
											"value": "11",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/reactive_unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"reactive_unsubscribe"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/reactivate_unsubscribe - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "plan_id",
											"type": "text",
											"value": "25",
											"disabled": true
										},
										{
											"key": "seats",
											"type": "text",
											"value": "11",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/reactive_unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"reactive_unsubscribe"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "End Users",
			"description": "All API end users",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "POST /api/users/get_token - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "prasetyanto.archiver01+1515808824@gmail.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123123123"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/get_token",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"get_token"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "POST /api/users/get_token - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "prasetyanto.backup01+1515808827@gmail.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123123123"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/get_token",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"get_token"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "POST /api/users/get_token - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "prasetyanto.personal01+1515999315@gmail.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123123123"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/get_token",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"get_token"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "GET /api/users/generate_redirect_link - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/generate_redirect_link",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"generate_redirect_link"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "GET /api/users/generate_redirect_link - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/generate_redirect_link",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"generate_redirect_link"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "GET /api/users/generate_redirect_link - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/generate_redirect_link",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"generate_redirect_link"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "PATCH /api/users/{id} - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "string",
											"key": "notification_email",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "{{Id-User-Archiver}}"
										},
										{
											"description": "string",
											"key": "external_id",
											"type": "text",
											"value": "archiver_{{$timestamp}}"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}"
									]
								},
								"description": "update user external id."
							},
							"response": []
						},
						{
							"name": "PATCH /api/users/{id} - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "string",
											"key": "notification_email",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "{{Id-User-Backup}}"
										},
										{
											"description": "string",
											"key": "external_id",
											"type": "text",
											"value": "backup_{{$timestamp}}"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}"
									]
								},
								"description": "update user external id."
							},
							"response": []
						},
						{
							"name": "PATCH /api/users/{id} - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'notification_email' is \" + responseBody.has(\"notification_email\")] = responseBody.has(\"notification_email\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"",
											"console.log(responseBody);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "string",
											"key": "notification_email",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "{{Id-User-Personal}}"
										},
										{
											"description": "string",
											"key": "external_id",
											"type": "text",
											"value": "Personal_{{$timestamp}}"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}"
									]
								},
								"description": "update user external id."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "accounts",
					"item": [
						{
							"name": "POST /api/accounts - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"Id-Account-Backup\", jsonData.id);",
											"postman.setEnvironmentVariable(\"Email-Account-Backup\", jsonData.email);",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/accounts?email=prasetyanto.dheka02%2B{{$timestamp}}%40gmail.com&password=1234asdF&send_sign_in_details=true",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									],
									"query": [
										{
											"key": "email",
											"value": "prasetyanto.dheka02%2B{{$timestamp}}%40gmail.com",
											"equals": true
										},
										{
											"key": "password",
											"value": "1234asdF",
											"equals": true
										},
										{
											"key": "send_sign_in_details",
											"value": "true",
											"equals": true
										}
									]
								},
								"description": "Add an email account to backup"
							},
							"response": []
						},
						{
							"name": "POST /api/accounts - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"Id-Account-Archiver\", jsonData.id);",
											"postman.setEnvironmentVariable(\"Email-Account-Archiver\", jsonData.email);",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/accounts?email=prasetyanto.dheka02%2B{{$timestamp}}%40gmail.com&password=1234asdF&send_sign_in_details=true",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									],
									"query": [
										{
											"key": "email",
											"value": "prasetyanto.dheka02%2B{{$timestamp}}%40gmail.com",
											"equals": true
										},
										{
											"key": "password",
											"value": "1234asdF",
											"equals": true
										},
										{
											"key": "send_sign_in_details",
											"value": "true",
											"equals": true
										}
									]
								},
								"description": "Add an email account to backup"
							},
							"response": []
						},
						{
							"name": "POST /api/accounts - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"Id-Account-Personal\", jsonData.id);",
											"postman.setEnvironmentVariable(\"Email-Account-Personal\", jsonData.email);",
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/accounts?email=prasetyanto.dheka02%2B{{$timestamp}}%40gmail.com&password=1234asdF&send_sign_in_details=true",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									],
									"query": [
										{
											"key": "email",
											"value": "prasetyanto.dheka02%2B{{$timestamp}}%40gmail.com",
											"equals": true
										},
										{
											"key": "password",
											"value": "1234asdF",
											"equals": true
										},
										{
											"key": "send_sign_in_details",
											"value": "true",
											"equals": true
										}
									]
								},
								"description": "Add an email account to backup"
							},
							"response": []
						},
						{
							"name": "GET /api/accounts - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
											"var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
											"tests[\"Theres new account archiver created by id \"] = jsonData.id = id_account_archiver;",
											"tests[\"Theres new account archiver created by email \"] = jsonData.id = email_account_archiver;",
											"",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "GET /api/accounts - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
											"var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
											"tests[\"Theres new account backup created by id \"] = jsonData.id = id_account_backup;",
											"tests[\"Theres new account backup created by email \"] = jsonData.id = email_account_backup;",
											"",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "GET /api/accounts - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
											"var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
											"tests[\"Theres new account personal created by id \"] = jsonData.id = id_account_personal;",
											"tests[\"Theres new account personal created by email \"] = jsonData.id = email_account_personal;",
											"",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "GET /api/accounts?email={email_account} - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
											"var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
											"tests[\"Theres new account personal created by id \"] = jsonData.id = id_account_personal;",
											"tests[\"Theres new account personal created by email \"] = jsonData.id = email_account_personal;",
											"",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "dme.jmeter.backup@test.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123qwe!@",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts?\"email\"=\"{{Email-Account-Personal}}\"",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									],
									"query": [
										{
											"key": "\"email\"",
											"value": "\"{{Email-Account-Personal}}\"",
											"equals": true
										}
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "GET /api/accounts?email={email_account} - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var id_account_personal = pm.environment.get(\"Id-Account-Backup\")",
											"var email_account_personal = pm.environment.get(\"Email-Account-Backup\")",
											"tests[\"Theres new account personal created by id \"] = jsonData.id = id_account_personal;",
											"tests[\"Theres new account personal created by email \"] = jsonData.id = email_account_personal;",
											"",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "dme.jmeter.backup@test.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123qwe!@",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts?\"email\"=\"{{Email-Account-Backup}}\"",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									],
									"query": [
										{
											"key": "\"email\"",
											"value": "\"{{Email-Account-Backup}}\"",
											"equals": true
										}
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "GET /api/accounts?email={email_account} - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
											"var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
											"tests[\"Theres new account archiver created by id \"] = jsonData.id = id_account_archiver;",
											"tests[\"Theres new account archiver created by email \"] = jsonData.id = email_account_archiver;",
											"",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "dme.jmeter.backup@test.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123qwe!@",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts?\"email\"=\"{{Email-Account-Archiver}}\"",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									],
									"query": [
										{
											"key": "\"email\"",
											"value": "\"{{Email-Account-Archiver}}\"",
											"equals": true
										}
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "GET /api/accounts?email={email_account}",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup-Statis}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "dme.jmeter.backup@test.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "123qwe!@",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts?email=bx@dropmypc.com",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts"
									],
									"query": [
										{
											"key": "email",
											"value": "bx@dropmypc.com",
											"equals": true
										}
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "PATCH /api/accounts/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}",
										"description": "reseller token"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup-Statis}}",
										"description": "end user auth token"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "blue.box@dropmypc.com",
											"type": "text",
											"description": "not mandatory",
											"disabled": true
										},
										{
											"key": "password",
											"value": "dms12345@",
											"type": "text",
											"description": "not mandatory"
										},
										{
											"key": "username",
											"value": "blue.box",
											"description": "not mandatory",
											"type": "text",
											"disabled": true
										},
										{
											"key": "advanced_settings",
											"value": "1",
											"description": "not mandatory",
											"type": "text",
											"disabled": true
										},
										{
											"key": "shared_mailbox",
											"value": "1",
											"description": "1 or 0, not mandatory",
											"type": "text"
										},
										{
											"key": "host",
											"value": "outlook.office365.com",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "port",
											"value": "993",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "o365_user_login",
											"value": "",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "shared_mailbox_login",
											"value": "bx@dropmypc.com",
											"description": "not mandatory, related to shared_mailbox.",
											"type": "text"
										},
										{
											"key": "shared_mailbox_type",
											"value": "o365",
											"description": "\"o365\" or \"cpanel\", not mandatory, related to shared_mailbox.",
											"type": "text"
										},
										{
											"key": "protocol",
											"value": "imap",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "security",
											"value": "ssl",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "oauth_token",
											"value": "",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "id",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/1195",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"1195"
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "PATCH /api/accounts/{id} - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"console.log(responseBody);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"type": "text",
											"value": "{{Email-Account-Archiver}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "1234asdF"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/{{Id-Account-Archiver}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"{{Id-Account-Archiver}}"
									]
								},
								"description": "Add an email account to backup"
							},
							"response": []
						},
						{
							"name": "PATCH /api/accounts/{id} - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"type": "text",
											"value": "{{Email-Account-Backup}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "1234asdF"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"{{Id-Account-Backup}}"
									]
								},
								"description": "Add an email account to backup"
							},
							"response": []
						},
						{
							"name": "PATCH /api/accounts/{id} - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "email",
											"type": "text",
											"value": "{{Email-Account-Personal}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "1234asdF"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"{{Id-Account-Personal}}"
									]
								},
								"description": "Add an email account to backup"
							},
							"response": []
						},
						{
							"name": "02010309 - PUT /api/accounts/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; "
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}",
										"description": "reseller token"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup-Statis}}",
										"description": "end user auth token"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "blue.box@dropmypc.com",
											"type": "text",
											"description": "not mandatory",
											"disabled": true
										},
										{
											"key": "password",
											"value": "dms12345@",
											"type": "text",
											"description": "not mandatory"
										},
										{
											"key": "username",
											"value": "blue.box",
											"description": "not mandatory",
											"type": "text",
											"disabled": true
										},
										{
											"key": "advanced_settings",
											"value": "1",
											"description": "not mandatory",
											"type": "text",
											"disabled": true
										},
										{
											"key": "shared_mailbox",
											"value": "1",
											"description": "1 or 0, not mandatory",
											"type": "text"
										},
										{
											"key": "host",
											"value": "outlook.office365.com",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "port",
											"value": "993",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "o365_user_login",
											"value": "",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "shared_mailbox_login",
											"value": "bx@dropmypc.com",
											"description": "not mandatory, related to shared_mailbox.",
											"type": "text"
										},
										{
											"key": "shared_mailbox_type",
											"value": "o365",
											"description": "\"o365\" or \"cpanel\", not mandatory, related to shared_mailbox.",
											"type": "text"
										},
										{
											"key": "protocol",
											"value": "imap",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "security",
											"value": "ssl",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "oauth_token",
											"value": "",
											"description": "not mandatory, related to advanced_settings.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "id",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/1195",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"1195"
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "PUT /api/accounts/{id}/deactivate - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/accounts/{{Id-Account-Archiver}}/deactivate",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"{{Id-Account-Archiver}}",
										"deactivate"
									]
								},
								"description": "Returns an array of user objects."
							},
							"response": []
						},
						{
							"name": "PUT /api/accounts/{id}/deactivate - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}/deactivate",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"{{Id-Account-Backup}}",
										"deactivate"
									]
								},
								"description": "Returns an array of user objects."
							},
							"response": []
						},
						{
							"name": "GET /api/accounts/deactivated_accounts - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/deactivated_accounts",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"deactivated_accounts"
									]
								},
								"description": "Returns an array of user objects."
							},
							"response": []
						},
						{
							"name": "GET /api/accounts/deactivated_accounts - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/deactivated_accounts",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"deactivated_accounts"
									]
								},
								"description": "Returns an array of user objects."
							},
							"response": []
						},
						{
							"name": "PUT /api/accounts/{id}/reactivate - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/accounts/{{Id-Account-Archiver}}/reactivate",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"{{Id-Account-Archiver}}",
										"reactivate"
									]
								},
								"description": "Returns an array of user objects."
							},
							"response": []
						},
						{
							"name": "PUT /api/accounts/{id}/reactivate - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
											"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
											"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
											"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
											"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
											"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
											"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
											"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
											"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
											"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
											"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
											"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
											"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
											"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
											"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
											"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
											"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
											"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
											"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
											"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
											"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
											"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
											"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
											"",
											"",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"var res = typeof(jsonData) === \"object\";",
											"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
											"",
											"console.log(responseBody);",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}/reactivate",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"{{Id-Account-Backup}}",
										"reactivate"
									]
								},
								"description": "Returns an array of user objects."
							},
							"response": []
						},
						{
							"name": "DELETE /api/accounts backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"{{Id-Account-Backup}}"
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "DELETE /api/accounts personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"{{Id-Account-Personal}}"
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "GET /api/deleted_accounts - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/deleted_accounts",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"deleted_accounts"
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						},
						{
							"name": "GET /api/deleted_accounts - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/accounts/deleted_accounts",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"accounts",
										"deleted_accounts"
									]
								},
								"description": "Returns an array of accounts"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "journals",
					"item": [
						{
							"name": "GET /api/journals",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/journals",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"journals"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "POST /api/journals",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/journals",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"journals"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "PATCH /api/journals",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										},
										{
											"key": "id",
											"type": "text",
											"value": "{{Id-Journal}}"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/journals{{Id-Journal}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"journals{{Id-Journal}}"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "https://mailer.dropmyemail.com/api/v1/journal_recipients",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "e8715570-3af4-4043-977f-4e5d02b8ce8b"
									},
									{
										"key": "X-Access-Token",
										"value": "881dd150-3547-4f4c-9e1b-f569dda7916a"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user",
											"type": "text",
											"value": "email.account.01"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123123123"
										}
									]
								},
								"url": {
									"raw": "https://mailer.dropmyemail.com/api/v1/journal_recipients",
									"protocol": "https",
									"host": [
										"mailer",
										"dropmyemail",
										"com"
									],
									"path": [
										"api",
										"v1",
										"journal_recipients"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Delete Users",
			"item": [
				{
					"name": "DELETE /api/users/{id}/immediate_delete - personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
									"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/immediate_delete",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"{{Id-User-Personal}}",
								"immediate_delete"
							]
						},
						"description": "unsubscribe a user."
					},
					"response": []
				}
			]
		}
	]
}