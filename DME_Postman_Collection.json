{
	"info": {
		"name": "step_by_step_DME_newman",
		"_postman_id": "36da6b5b-b3ff-208d-bef0-fddd803c0ea8",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Countries, Timezones, Locales",
			"item": [
				{
					"name": "GET /api/countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseCode.code === 200) {",
									"    var schema = {",
									"        \"properties\": {",
									"            \"country_code\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"country_name\": {",
									"                \"type\": \"string\"",
									"            }",
									"        },",
									"        \"required\": [\"id\", \"country_code\", \"country_name\"]",
									"    };",
									"",
									"       jsonData.forEach(function(post) {",
									"        var valid_schema = tv4.validateResult(post, schema).valid;",
									"            if (!valid_schema) {",
									"                tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
									"             }else{",
									"                tests[\"Country code \" + post.country_code + \" conform to schema\"] = tv4.validate(post, schema);",
									"             }",
									"        }); ",
									"    ",
									"    postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
									"        let helpers = {};",
									"        ",
									"        helpers.verifyCount = function verifyCount(expectedCount) {",
									"            tests[\"Response count is: \" + expectedCount] = jsonData.length === expectedCount;",
									"        }",
									"        return helpers;",
									"    }+ ';loadHelpers()');",
									"    ",
									"    var count = jsonData.length;",
									"    tests[\"Count should be 253 and real count is \" + count] = jsonData.length === 253;",
									"} else {",
									"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/countries",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"countries"
							]
						},
						"description": "GET /api/countries"
					},
					"response": []
				},
				{
					"name": "GET /api/timezones",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseCode.code === 200) {",
									"    var schema = {",
									"        \"properties\": {",
									"    ",
									"            \"zone_id\": {",
									"                \"type\": \"string\"",
									"             },",
									"            \"zone_name\": {",
									"                \"type\": \"string\"",
									"            }",
									"        },",
									"        \"required\": [\"zone_id\", \"zone_name\"]",
									"    };",
									"",
									"    jsonData.forEach(function(post) {",
									"    var valid_schema = tv4.validateResult(post, schema).valid;",
									"        if (!valid_schema) {",
									"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
									"        }else{",
									"            tests[\"Zone id \" + post.zone_id + \" conform to schema\"] = tv4.validate(post, schema);",
									"        }",
									"    });",
									"    ",
									"    var helpers = eval(globals.loadHelpers);",
									"    helpers.verifyCount(149);",
									"    //var count = jsonData.length;",
									"    //tests[\"Count should be 149 and real count is \" + count] = jsonData.length === 149;",
									"}else{",
									"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/timezones",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"timezones"
							]
						},
						"description": "GET /api/timezones"
					},
					"response": []
				},
				{
					"name": "GET /api/locales",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
									"",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"if (responseCode.code === 200){",
									"    tests[\"Body matches string 'japanese' is \" + responseBody.has(\"japanese\")] = responseBody.has(\"japanese\");",
									"    tests[\"Body matches string 'english' is \" + responseBody.has(\"english\")] = responseBody.has(\"english\");",
									"}else {",
									"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/locales",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"locales"
							]
						},
						"description": "GET /api/locales"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reseller",
			"description": "All api reseller",
			"item": [
				{
					"name": "plans",
					"item": [
						{
							"name": "POST /api/plans - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 201) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"currency\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"data_storage\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"periodicity\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"amount\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"product_type\": {",
											"                \"type\": \"string\"",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"name\",\"currency\", \"data_storage\", \"periodicity\", \"amount\", \"product_type\"]",
											"    };",
											"",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"        if (!valid_schema) {",
											"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"        }else{",
											"            tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"        }",
											"",
											"    tests[\"Name should fill with res-personal-api \"] = jsonData.name === \"res-personal-api\";",
											"    tests[\"Currency should fill with USD\"] = jsonData.currency === \"USD\";",
											"    tests[\"Data_storage should fill with 6.0\"] = jsonData.data_storage === \"6.0\";",
											"    tests[\"Periodicity should fill with 1 month\"] = jsonData.periodicity === \"1 month\";",
											"    tests[\"Amount should fill with 1.0\"] = jsonData.amount === \"1.0\";",
											"    tests[\"Product_type should fill with res_personal\"] = jsonData.product_type === \"res_personal\";",
											"    ",
											"    postman.setEnvironmentVariable(\"Id-Plan-Personal\", jsonData.id);",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "res-personal-api",
											"type": "text"
										},
										{
											"key": "product_type",
											"value": "res_personal",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "data_storage",
											"value": "6",
											"type": "text"
										},
										{
											"key": "currency",
											"value": "USD",
											"type": "text"
										},
										{
											"key": "periodicity",
											"value": "monthly",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/plans",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"plans"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "POST /api/plans - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 201) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"currency\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"data_storage\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"periodicity\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"amount\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"product_type\": {",
											"                \"type\": \"string\"",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"name\",\"currency\", \"data_storage\", \"periodicity\", \"amount\", \"product_type\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"        }",
											"",
											"    tests[\"Name should fill with API_backup \"] = jsonData.name === \"API_backup\";",
											"    tests[\"Currency should fill with USD\"] = jsonData.currency === \"USD\";",
											"    tests[\"Data_storage should fill with 9999.0\"] = jsonData.data_storage === \"9999.0\";",
											"    tests[\"Periodicity should fill with 1 month\"] = jsonData.periodicity === \"1 month\";",
											"    tests[\"Amount should fill with 1.0\"] = jsonData.amount === \"1.0\";",
											"    tests[\"Product_type should fill with res_backup\"] = jsonData.product_type === \"res_backup\";",
											"    ",
											"    postman.setEnvironmentVariable(\"Id-Plan-Backup\", jsonData.id);",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"type": "text",
											"value": "API_backup"
										},
										{
											"key": "product_type",
											"type": "text",
											"value": "res_backup"
										},
										{
											"key": "amount",
											"type": "text",
											"value": "1.0"
										},
										{
											"key": "data_storage",
											"type": "text",
											"value": "777",
											"disabled": true
										},
										{
											"key": "currency",
											"type": "text",
											"value": "USD"
										},
										{
											"key": "periodicity",
											"type": "text",
											"value": "monthly"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/plans",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"plans"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "POST /api/plans - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 201) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"currency\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"data_storage\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"periodicity\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"amount\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"product_type\": {",
											"                \"type\": \"string\"",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"name\",\"currency\", \"data_storage\", \"periodicity\", \"amount\", \"product_type\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"Name should fill with API_Archiver \"] = jsonData.name === \"API_Archiver\";",
											"    tests[\"Currency should fill with USD\"] = jsonData.currency === \"USD\";",
											"    tests[\"Data_storage should fill with 9999.0\"] = jsonData.data_storage === \"9999.0\";",
											"    tests[\"Periodicity should fill with 1 month\"] = jsonData.periodicity === \"1 month\";",
											"    tests[\"Amount should fill with 1.0\"] = jsonData.amount === \"1.0\";",
											"    tests[\"Product_type should fill with res_archive\"] = jsonData.product_type === \"res_archive\";",
											"    ",
											"    postman.setEnvironmentVariable(\"Id-Plan-Archiver\", jsonData.id);",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "API_Archiver",
											"type": "text"
										},
										{
											"key": "product_type",
											"value": "res_archive",
											"type": "text"
										},
										{
											"key": "amount",
											"value": "1.0",
											"type": "text"
										},
										{
											"key": "data_storage",
											"value": "777",
											"type": "text"
										},
										{
											"key": "currency",
											"value": "USD",
											"type": "text"
										},
										{
											"key": "periodicity",
											"value": "monthly",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/plans",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"plans"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "GET /api/plans",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200) {",
											"    var id_personal = pm.environment.get(\"Id-Plan-Personal\")",
											"    var id_backup = pm.environment.get(\"Id-Plan-Backup\")",
											"    var id_archiver = pm.environment.get(\"Id-Plan-Archiver\")",
											"    ",
											"    tests[\"Theres new plans personal created \"] = responseBody.has(id_personal);",
											"    tests[\"Theres new plans backup created \"] = responseBody.has(id_backup);",
											"    tests[\"Theres new plans archiver created \"] = responseBody.has(id_archiver);",
											"",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"currency\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"data_storage\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"periodicity\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"amount\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"product_type\": {",
											"                \"type\": \"string\"",
											"            }",
											"        },",
											"        \"required\": [\"id\", \"name\",\"currency\", \"data_storage\", \"periodicity\", \"amount\", \"product_type\"]",
											"    };",
											"",
											"    jsonData.forEach(function(post) {",
											"    var valid_schema = tv4.validateResult(post, schema).valid;",
											"        if (!valid_schema) {",
											"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
											"        }else{",
											"            tests[\"Plan id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
											"        }",
											"    });",
											"    ",
											"    ",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/plans",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"plans"
									]
								},
								"description": "Return an array of plans."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "users",
					"item": [
						{
							"name": "POST /api/users - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 201) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"seats_available should fill with 3\"] = jsonData.seats_available === 3;",
											"    tests[\"archive should fill with true\"] = jsonData.archive === true;",
											"    ",
											"    postman.setEnvironmentVariable(\"X-Access-Token-Archiver\", jsonData.authentication_token);",
											"    postman.setEnvironmentVariable(\"Id-User-Archiver\", jsonData.id);",
											"    postman.setEnvironmentVariable(\"Email-User-Archiver\", jsonData.email);",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"description": "mandatory",
											"key": "email",
											"type": "text",
											"value": "prasetyanto.archiver01+{{$timestamp}}@gmail.com"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "first_name",
											"type": "text",
											"value": "test"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "last_name",
											"type": "text",
											"value": "user"
										},
										{
											"description": "mandatory",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Archiver}}"
										},
										{
											"description": "mandatory",
											"key": "time_zone",
											"type": "text",
											"value": "Hanoi"
										},
										{
											"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
											"key": "seats",
											"type": "text",
											"value": "3"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "organization_attributes[name]",
											"type": "text",
											"value": "api-archiver{{$timestamp}}"
										},
										{
											"key": "external_id",
											"type": "text",
											"value": "archiver_725",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "POST /api/users - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 201) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"seats_available should fill with 1\"] = jsonData.seats_available === 1;",
											"    tests[\"archive should fill with false\"] = jsonData.archive === false;",
											"    ",
											"   postman.setEnvironmentVariable(\"X-Access-Token-Backup\", jsonData.authentication_token);",
											"    postman.setEnvironmentVariable(\"Id-User-Backup\", jsonData.id);",
											"    postman.setEnvironmentVariable(\"Email-User-Backup\", jsonData.email);",
											"",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"description": "mandatory",
											"key": "email",
											"type": "text",
											"value": "prasetyanto.backup01+{{$timestamp}}@gmail.com"
										},
										{
											"description": "mandatory",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Backup}}"
										},
										{
											"description": "mandatory",
											"key": "time_zone",
											"type": "text",
											"value": "Hanoi"
										},
										{
											"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
											"key": "seats",
											"type": "text",
											"value": "1"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "first_name",
											"type": "text",
											"value": "test"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "last_name",
											"type": "text",
											"value": "user"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "organization_attributes[name]",
											"type": "text",
											"value": "api-backup-{{$timestamp}}"
										},
										{
											"key": "external_id",
											"type": "text",
											"value": "api{{$randomInt}}",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "POST /api/users - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 201) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"seats_available should fill with 1\"] = jsonData.seats_available === 1;",
											"    tests[\"archive should fill with false\"] = jsonData.archive === false;",
											"    ",
											"    postman.setEnvironmentVariable(\"X-Access-Token-Personal\", jsonData.authentication_token);",
											"    postman.setEnvironmentVariable(\"Id-User-Personal\", jsonData.id);",
											"    postman.setEnvironmentVariable(\"Email-User-Personal\", jsonData.email);",
											"",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"description": "mandatory",
											"key": "email",
											"type": "text",
											"value": "prasetyanto.personal01+{{$timestamp}}@gmail.com"
										},
										{
											"description": "mandatory",
											"key": "plan_id",
											"type": "text",
											"value": "{{Static-Plan}}"
										},
										{
											"description": "mandatory",
											"key": "time_zone",
											"type": "text",
											"value": "Hanoi"
										},
										{
											"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
											"key": "seats",
											"type": "text",
											"value": "1",
											"disabled": true
										},
										{
											"description": "mandatory for backup and archive",
											"key": "first_name",
											"type": "text",
											"value": "test"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "last_name",
											"type": "text",
											"value": "user"
										},
										{
											"description": "mandatory for backup and archive",
											"key": "organization_attributes[name]",
											"type": "text",
											"value": "api archiver 2",
											"disabled": true
										},
										{
											"key": "external_id",
											"type": "text",
											"value": "api{{$randomInt}}",
											"disabled": true
										},
										{
											"key": "send_sign_in_details",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "GET /api/users - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
											"var jsonData = JSON.parse(responseBody);",
											" if (responseCode.code === 200) {",
											"    var id_user_personal = pm.environment.get(\"Id-User-Personal\")",
											"    var id_user_backup = pm.environment.get(\"Id-User-Backup\")",
											"    var id_user_archiver = pm.environment.get(\"Id-User-Archiver\")",
											"        //if (!responseBody.has(id_user_personal)){",
											"        //    tests[\"Theres no new user personal created before with user id \" + id_user_personal] = false;",
											"         //}else{",
											"            tests[\"Theres new user personal created with user id \" + id_user_personal] = true;",
											"        //}",
											"    tests[\"Theres new user backup created with user id \"+ id_user_backup] = responseBody.has(id_user_backup);",
											"    tests[\"Theres new user archiver created with user id \"+ id_user_archiver] = responseBody.has(id_user_archiver);",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            //\"external_id\": {",
											"            //    \"type\": \"string\"",
											"            //},",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspended\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"    ",
											"    jsonData.forEach(function(post) {",
											"    var valid_schema = tv4.validateResult(post, schema).valid;",
											"        if (!valid_schema) {",
											"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
											"        }else{",
											"            tests[\"User id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
											"        }",
											"    });",
											" }else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
											" }",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									]
								},
								"description": "Returns an array of user objects."
							},
							"response": []
						},
						{
							"name": "GET /api/users - by params : email",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"seats_available should fill with 12\"] = jsonData.seats_available === 12;",
											"    tests[\"archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response email should be \" + pm.environment.get(\"Statis-Email-User\")] = jsonData.email.has(pm.environment.get(\"Statis-Email-User\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users?email={{Statis-Email-User}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "email",
											"value": "{{Statis-Email-User}}",
											"equals": true
										}
									]
								},
								"description": "Returns an array of user objects, by parameter email."
							},
							"response": []
						},
						{
							"name": "GET /api/users - by params : external_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 12\"] = jsonData.seats_available === 12;",
											"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Statis-Email-User\")] = jsonData.email.has(pm.environment.get(\"Statis-Email-User\"))",
											"    tests[\"response body external id should be archiver_725\"] = jsonData.external_id === \"archiver_725\"",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users?external_id=archiver_725",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "external_id",
											"value": "archiver_725",
											"equals": true
										}
									]
								},
								"description": "Returns an array of user objects, by parameter external_id."
							},
							"response": []
						},
						{
							"name": "POST /api/users/{id}/update_subscription - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 201 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"subscription\": {",
											"                \"properties\": {",
											"                    \"id\": {",
											"                    \"type\": \"integer\"",
											"                    },",
											"                    \"periodicity\": {",
											"                    \"type\": \"integer\"",
											"                    },",
											"                    \"amount\": {",
											"                    \"type\": \"string\"",
											"                    },",
											"                    \"currency\": {",
											"                    \"type\": \"string\"",
											"                    },",
											"                    \"product_type\": {",
											"                    \"type\": \"string\"",
											"                    },",
											"                    \"seats\": {",
											"                    \"type\": \"integer\"",
											"                    },",
											"                    \"storage_available\": {",
											"                    \"type\": \"integer\"",
											"                    },",
											"                    \"required\": [\"id\", \"periodicity\",\"amount\", \"currency\", \"product_type\", \"seats\", \"storage_available\"]",
											"                }",
											"            }",
											"            ",
											"        }",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats should fill with 12\"] = jsonData.subscription.seats === 12;",
											"    //tests[\"response body id should be \" + pm.environment.get(\"Id-User-Archiver\")] = jsonData.subscription.id.has(pm.environment.get(\"Id-User-Archiver\"))",
											"}else if (responseCode.code === 201){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Archiver}}"
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "12"
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "13",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/update_subscription",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"update_subscription"
									]
								},
								"description": "update user subscription."
							},
							"response": []
						},
						{
							"name": "POST /api/users/{id}/update_subscription - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 201 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"subscription\": {",
											"                \"properties\": {",
											"                    \"id\": {",
											"                    \"type\": \"integer\"",
											"                    },",
											"                    \"periodicity\": {",
											"                    \"type\": \"integer\"",
											"                    },",
											"                    \"amount\": {",
											"                    \"type\": \"string\"",
											"                    },",
											"                    \"currency\": {",
											"                    \"type\": \"string\"",
											"                    },",
											"                    \"product_type\": {",
											"                    \"type\": \"string\"",
											"                    },",
											"                    \"seats\": {",
											"                    \"type\": \"integer\"",
											"                    },",
											"                    \"storage_available\": {",
											"                    \"type\": \"integer\"",
											"                    },",
											"                    \"required\": [\"id\", \"periodicity\",\"amount\", \"currency\", \"product_type\", \"seats\", \"storage_available\"]",
											"                }",
											"            }",
											"            ",
											"        }",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats should fill with 12\"] = jsonData.subscription.seats === 12;",
											"    //tests[\"response body id should be \" + pm.environment.get(\"Id-User-Archiver\")] = jsonData.subscription.id.has(pm.environment.get(\"Id-User-Archiver\"))",
											"}else if (responseCode.code === 201){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Backup}}"
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "12"
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "13",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/update_subscription",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"update_subscription"
									]
								},
								"description": "update user subscription."
							},
							"response": []
						},
						{
							"name": "POST /api/users/{id}/update_subscription - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 201 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"subscription\": {",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"periodicity\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"amount\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"currency\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"product_type\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"seats\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"storage_available\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"required\": [\"id\", \"periodicity\",\"amount\", \"currency\", \"product_type\", \"seats\", \"storage_available\"]",
											"                }",
											"            }",
											"            ",
											"        }",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats should fill with 1\"] = jsonData.subscription.seats === 1;",
											"    //tests[\"response body id should be \" + pm.environment.get(\"Id-User-Archiver\")] = jsonData.subscription.id.has(pm.environment.get(\"Id-User-Archiver\"))",
											"}else if (responseCode.code === 201){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "plan_id",
											"type": "text",
											"value": "{{Id-Plan-Personal}}"
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "50",
											"disabled": true
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "13",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/update_subscription",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"update_subscription"
									]
								},
								"description": "update user subscription."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/suspend - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 3\"] = jsonData.seats_available === 12;",
											"    tests[\"response body archive should fill with true\"] = jsonData.archive === true;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Archiver\")] = jsonData.email.has(pm.environment.get(\"Email-User-Archiver\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/suspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"suspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/suspend - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 3\"] = jsonData.seats_available === 12;",
											"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Backup\")] = jsonData.email.has(pm.environment.get(\"Email-User-Backup\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/suspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"suspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/suspend - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 1\"] = jsonData.seats_available === 1;",
											"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Personal\")] = jsonData.email.has(pm.environment.get(\"Email-User-Personal\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/suspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"suspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/unsuspend - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 3\"] = jsonData.seats_available === 12;",
											"    tests[\"response body archive should fill with true\"] = jsonData.archive === true;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Archiver\")] = jsonData.email.has(pm.environment.get(\"Email-User-Archiver\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/unsuspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"unsuspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/unsuspend - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 3\"] = jsonData.seats_available === 12;",
											"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Backup\")] = jsonData.email.has(pm.environment.get(\"Email-User-Backup\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/unsuspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"unsuspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/unsuspend - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 1\"] = jsonData.seats_available === 1;",
											"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Personal\")] = jsonData.email.has(pm.environment.get(\"Email-User-Personal\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/unsuspend",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"unsuspend"
									]
								},
								"description": "suspend a user."
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/{id}/unsubscribe - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"if (responseCode.code === 204) {",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "727",
											"disabled": true
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "string",
											"key": "plan_id",
											"type": "text",
											"value": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"unsubscribe"
									]
								},
								"description": "re-active unsubscribe user."
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/{id}/unsubscribe - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"if (responseCode.code === 204) {",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "727",
											"disabled": true
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "string",
											"key": "plan_id",
											"type": "text",
											"value": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"unsubscribe"
									]
								},
								"description": "re-active unsubscribe user."
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/{id}/unsubscribe - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"if (responseCode.code === 204) {",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "727",
											"disabled": true
										},
										{
											"description": "integer",
											"key": "seats",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "string",
											"key": "plan_id",
											"type": "text",
											"value": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"unsubscribe"
									]
								},
								"description": "re-active unsubscribe user."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/reactivate_unsubscribe - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 3\"] = jsonData.seats_available === 12;",
											"    tests[\"response body archive should fill with true\"] = jsonData.archive === true;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Archiver\")] = jsonData.email.has(pm.environment.get(\"Email-User-Archiver\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "plan_id",
											"type": "text",
											"value": "25",
											"disabled": true
										},
										{
											"key": "seats",
											"type": "text",
											"value": "11",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}/reactive_unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}",
										"reactive_unsubscribe"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/reactivate_unsubscribe - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 3\"] = jsonData.seats_available === 12;",
											"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Backup\")] = jsonData.email.has(pm.environment.get(\"Email-User-Backup\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "plan_id",
											"type": "text",
											"value": "25",
											"disabled": true
										},
										{
											"key": "seats",
											"type": "text",
											"value": "11",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}/reactive_unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}",
										"reactive_unsubscribe"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						},
						{
							"name": "PUT /api/users/{id}/reactivate_unsubscribe - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 1\"] = jsonData.seats_available === 1;",
											"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Personal\")] = jsonData.email.has(pm.environment.get(\"Email-User-Personal\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Reseller}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "plan_id",
											"type": "text",
											"value": "25",
											"disabled": true
										},
										{
											"key": "seats",
											"type": "text",
											"value": "11",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/reactive_unsubscribe",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"reactive_unsubscribe"
									]
								},
								"description": "Creates a new plans."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "End Users",
			"description": "All API end users",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "POST /api/users/get_token - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201){",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"",
											"    tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"    tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"",
											"} else {",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "prasetyanto.archiver01+1515808824@gmail.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123123123"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/get_token",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"get_token"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "POST /api/users/get_token - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201){",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"",
											"    tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"    tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"",
											"} else {",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "prasetyanto.backup01+1515808827@gmail.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123123123"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/get_token",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"get_token"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "POST /api/users/get_token - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201){",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"",
											"    tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"    tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"",
											"} else {",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "prasetyanto.personal01+1515999315@gmail.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123123123"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/get_token",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"get_token"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "POST /api/users/get_token - backup statis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201){",
											"    var jsonData = JSON.parse(responseBody);",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
											"",
											"    tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"    tests[\"Body matches string 'authentication' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
											"    ",
											"     postman.setEnvironmentVariable(\"X-Access-Token-Backup-Statis\", jsonData.authentication_token);",
											"",
											"} else {",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token-1}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "backup.11@mailer.dropmyemail.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123123123"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/get_token",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"get_token"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "GET /api/users/generate_redirect_link - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200){",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"",
											"    tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"    tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
											"",
											"} else {",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/generate_redirect_link",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"generate_redirect_link"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "GET /api/users/generate_redirect_link - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200){",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"",
											"    tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"    tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
											"",
											"} else {",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/generate_redirect_link",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"generate_redirect_link"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "GET /api/users/generate_redirect_link - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200){",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"",
											"    tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"    tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
											"",
											"} else {",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/generate_redirect_link",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"generate_redirect_link"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "GET /api/users/generate_redirect_link - backup statis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200){",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"",
											"    tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"    tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
											"",
											"} else {",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token-1}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup-Statis}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/generate_redirect_link",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"generate_redirect_link"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "PATCH /api/users/{id} - archiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 12\"] = jsonData.seats_available === 12;",
											"    tests[\"response body archive should fill with true\"] = jsonData.archive === true;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Archiver\")] = jsonData.email.has(pm.environment.get(\"Email-User-Archiver\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "string",
											"key": "notification_email",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "{{Id-User-Archiver}}"
										},
										{
											"description": "string",
											"key": "external_id",
											"type": "text",
											"value": "archiver_{{$timestamp}}"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Archiver}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Archiver}}"
									]
								},
								"description": "update user external id."
							},
							"response": []
						},
						{
							"name": "PATCH /api/users/{id} - backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 12\"] = jsonData.seats_available === 12;",
											"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Backup\")] = jsonData.email.has(pm.environment.get(\"Email-User-Backup\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Backup}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "string",
											"key": "notification_email",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "{{Id-User-Backup}}"
										},
										{
											"description": "string",
											"key": "external_id",
											"type": "text",
											"value": "backup_{{$timestamp}}"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Backup}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Backup}}"
									]
								},
								"description": "update user external id."
							},
							"response": []
						},
						{
							"name": "PATCH /api/users/{id} - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseCode.code === 200 && jsonData !== null) {",
											"    var schema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"             },",
											"            \"email\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"authentication_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"organization_id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"reseller_token\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"notification_email\": {",
											"              \"type\": \"array\"",
											"            },",
											"            \"external_id\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"is_bussiness\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"admin\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"customer_deactivated\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"seats_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"seats_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_used\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"storage_available\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"archive\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"backup_summary\": {",
											"                \"type\": \"null\"",
											"            },",
											"            \"login_disabled\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"            \"flg_suspende\": {",
											"                \"type\": \"boolean\"",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
											"    };",
											"",
											"        ",
											"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
											"    if (!valid_schema) {",
											"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
											"    }else{",
											"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
											"    }",
											"    ",
											"    tests[\"response body seats_available should fill with 1\"] = jsonData.seats_available === 1;",
											"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
											"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Personal\")] = jsonData.email.has(pm.environment.get(\"Email-User-Personal\"))",
											"}else if (responseCode.code === 200){",
											"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Personal}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"description": "string",
											"key": "notification_email",
											"type": "text",
											"value": "",
											"disabled": true
										},
										{
											"description": "required, integer",
											"key": "id",
											"type": "text",
											"value": "{{Id-User-Personal}}"
										},
										{
											"description": "string",
											"key": "external_id",
											"type": "text",
											"value": "Personal_{{$timestamp}}"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}"
									]
								},
								"description": "update user external id."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "accounts",
					"item": [
						{
							"name": "Other (ex: Gmail, Yahoo)",
							"description": "",
							"item": [
								{
									"name": "POST /api/accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/*var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"Id-Account-Backup\", jsonData.id);",
													"postman.setEnvironmentVariable(\"Email-Account-Backup\", jsonData.email);",
													"",
													"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
													"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
													"",
													"",
													"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
													"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
													"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
													"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
													"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
													"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
													"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
													"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
													"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
													"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
													"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
													"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
													"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
													"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
													"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
													"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
													"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
													"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
													"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
													"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
													"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
													"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
													"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
													"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
													"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
													"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
													"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
													"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var res = typeof(jsonData) === \"object\";",
													"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
													"",
													"console.log(responseBody);",
													"*/",
													"",
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 201) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"last_backup\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"deactivated_since\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"email\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"display_name\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"username\": {",
													"              \"type\": \"null\"",
													"            },",
													"            \"storage\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"msg_count\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"flg_deleted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"errors\": {",
													"                \"type\": \"object\"",
													"            },",
													"            \"user\": {",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"email\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"authentication_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"reseller_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"external_id\": {",
													"                        \"type\": \"null\"",
													"                     },",
													"                    \"is_business\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"customer_deactivated\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"seats_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"seats_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"archive\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"organization_id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"backup_summary\": {",
													"                        \"type\": \"array\"",
													"                    },",
													"                    \"login_disabled\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"flg_suspended\": {",
													"                        \"type\": \"boolean\"",
													"                    }",
													"                },",
													"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"            }",
													"        },",
													"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"    };",
													"",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
													"    tests[\"archive should fill with false\"] = jsonData.user.archive === false;",
													"    ",
													"    postman.setEnvironmentVariable(\"Id-Account-Backup\", jsonData.id);",
													"    postman.setEnvironmentVariable(\"Email-Account-Backup\", jsonData.email);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts?email=prasetyanto.dheka01%2B{{$timestamp}}%40gmail.com&password=1234asdF&send_sign_in_details=true",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "prasetyanto.dheka01%2B{{$timestamp}}%40gmail.com",
													"equals": true
												},
												{
													"key": "password",
													"value": "1234asdF",
													"equals": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"equals": true
												}
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "POST /api/accounts - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 201) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"last_backup\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"deactivated_since\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"email\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"display_name\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"username\": {",
													"              \"type\": \"null\"",
													"            },",
													"            \"storage\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"msg_count\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"flg_deleted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"errors\": {",
													"                \"type\": \"object\"",
													"            },",
													"            \"user\": {",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"email\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"authentication_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"reseller_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"external_id\": {",
													"                        \"type\": \"null\"",
													"                     },",
													"                    \"is_business\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"customer_deactivated\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"seats_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"seats_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"archive\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"organization_id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"backup_summary\": {",
													"                        \"type\": \"array\"",
													"                    },",
													"                    \"login_disabled\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"flg_suspended\": {",
													"                        \"type\": \"boolean\"",
													"                    }",
													"                },",
													"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"            },",
													"        },",
													"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"    };",
													"",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
													"    tests[\"archive should fill with true\"] = jsonData.user.archive === true;",
													"    ",
													"    postman.setEnvironmentVariable(\"Id-Account-Archiver\", jsonData.id);",
													"    postman.setEnvironmentVariable(\"Email-Account-Archiver\", jsonData.email);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts?email=prasetyanto.dheka01%2B{{$timestamp}}%40gmail.com&password=1234asdF&send_sign_in_details=true",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "prasetyanto.dheka01%2B{{$timestamp}}%40gmail.com",
													"equals": true
												},
												{
													"key": "password",
													"value": "1234asdF",
													"equals": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"equals": true
												}
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "POST /api/accounts - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 201) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"last_backup\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"deactivated_since\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"email\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"display_name\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"username\": {",
													"              \"type\": \"null\"",
													"            },",
													"            \"storage\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"msg_count\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"flg_deleted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"errors\": {",
													"                \"type\": \"object\"",
													"            },",
													"            \"user\": {",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"email\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"authentication_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"reseller_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"external_id\": {",
													"                        \"type\": \"string\"",
													"                     },",
													"                    \"is_business\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"customer_deactivated\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"seats_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"seats_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"archive\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"organization_id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"backup_summary\": {",
													"                        \"type\": \"array\"",
													"                    },",
													"                    \"login_disabled\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"flg_suspended\": {",
													"                        \"type\": \"boolean\"",
													"                    }",
													"                },",
													"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"            },",
													"        },",
													"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"    };",
													"",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
													"    tests[\"archive should fill with false\"] = jsonData.user.archive === false;",
													"    ",
													"    postman.setEnvironmentVariable(\"Id-Account-Personal\", jsonData.id);",
													"    postman.setEnvironmentVariable(\"Email-Account-Personal\", jsonData.email);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts?email=prasetyanto.dheka01%2B{{$timestamp}}%40gmail.com&password=1234asdF&send_sign_in_details=true",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "prasetyanto.dheka01%2B{{$timestamp}}%40gmail.com",
													"equals": true
												},
												{
													"key": "password",
													"value": "1234asdF",
													"equals": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"equals": true
												}
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = {",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"result_set\": {",
													"      \"type\": \"array\",",
													"      \"items\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"last_backup\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"deactivated_since\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"display_name\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"username\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"storage\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"msg_count\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"flg_deleted\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"errors\": {",
													"            \"type\": \"object\"",
													"          },",
													"          \"user\": {",
													"            \"type\": \"object\",",
													"            \"properties\": {",
													"              \"id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"email\": {",
													"                \"type\": \"string\"",
													"              },",
													"              \"authentication_token\": {",
													"                \"type\": \"string\"",
													"              },",
													"              \"reseller_token\": {",
													"                \"type\": \"string\"",
													"              },",
													"              \"external_id\": {",
													"                \"type\": \"null\"",
													"              },",
													"              \"is_business\": {",
													"                \"type\": \"boolean\"",
													"              },",
													"              \"admin\": {",
													"                \"type\": \"boolean\"",
													"              },",
													"              \"customer_deactivated\": {",
													"                \"type\": \"boolean\"",
													"              },",
													"              \"seats_used\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"seats_available\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"storage_used\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"storage_available\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"archive\": {",
													"                \"type\": \"boolean\"",
													"              },",
													"              \"organization_id\": {",
													"                \"type\": \"integer\"",
													"              },",
													"              \"backup_summary\": {",
													"                \"type\": \"array\"",
													"              },",
													"              \"login_disabled\": {",
													"                \"type\": \"boolean\"",
													"              },",
													"              \"flg_suspended\": {",
													"                \"type\": \"boolean\"",
													"              }",
													"            },",
													"            //required",
													"            \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"      }",
													"    },",
													"    \"pagination\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"current_page\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"per_page\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"total_entries\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"total_pages\": {",
													"          \"type\": \"integer\"",
													"        }",
													"      },",
													"      \"required\": [\"current_page\", \"per_page\", \"total_entries\", \"total_pages\"]",
													"    },",
													"    \"api_version\": {",
													"      \"type\": \"integer\"",
													"    }",
													"  },",
													"  \"required\": [\"result_set\", \"pagination\", \"api_version\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?page=1",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
													"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
													"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
													"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?page=1 - backup statis",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var schema = {",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [\"id\", \"email\"]",
													"};",
													"",
													"var postIDs =[];",
													"",
													"jsonData.result_set.forEach(function(post) {",
													"    var testTitle = \"id\" + post.id + \" conforms to schema\";",
													"    postIDs.push(post.id);",
													"    tests[testTitle] = tv4.validate(post, schema);",
													"});",
													"",
													"postman.setEnvironmentVariable('IDs', JSON.stringify(postIDs));",
													"postman.setEnvironmentVariable('count', 1+1);",
													"",
													"postman.setNextRequest(\"GET /api/accounts?page={{count}} - backup statis\");",
													"//console.log(postIDs)"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts?page=1",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?page={{count}} - backup statis",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"var schema = {",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"email\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [\"id\", \"email\"]",
													"};",
													"",
													"var keys = Object.keys(jsonData.result_set);",
													"var test = jsonData.result_set.id",
													"var ids = pm.environment.get(\"IDs\");",
													"var x = ids.replace(\"[\", \"\").replace(\"]\",\"\").replace(/[\"']/g, \"\").split(\",\")",
													"//i = 0",
													"var postIDs = [];",
													"//for(i = 0; i < Object.size(jsonData.result_set); i++) {",
													"    jsonData.result_set.forEach(function(post) {",
													"        //var i = JSON.stringify(ids)",
													"        //idss = ids.shift()",
													"        var testTitle = \"id \" + post.id + \" conforms to schema\";",
													"        //tests[\"new id \" +  post.id + \" != latest id \"+ x[i]] = jsonData.id = x[i];",
													"        tests[testTitle] = tv4.validate(post, schema);",
													"        i = i + 1;",
													"        postIDs.push(post.id);",
													"    });",
													"//}",
													"",
													"var sum = Object.size(jsonData.result_set)",
													"var y = JSON.stringify(postIDs)",
													"var arrayy = y.replace(\"[\", \"\").replace(\"]\",\"\").split(\",\")",
													"var xy = x.concat(arrayy);",
													"if (sum >= 20){",
													"    var page = pm.environment.get(\"count\");",
													"    postman.setEnvironmentVariable('IDs', JSON.stringify(xy));",
													"    postman.setEnvironmentVariable('count', Number(page) + 1);",
													"    postman.setNextRequest(\"GET /api/accounts?page={{count}} - backup statis\");",
													"}else {",
													"    var sorted_arr = xy.slice().sort();",
													"    var double = [];",
													"    for (var i = 0; i < sorted_arr.length - 1; i++) {",
													"        if (sorted_arr[i + 1] == sorted_arr[i]) {",
													"            double.push(sorted_arr[i]);",
													"        }",
													"    }",
													"    console.log(double)",
													"        if (double.length === 0){",
													"            tests[\"there's no double id\"] = true;",
													"        }else{",
													"            tests[\"there's double id\"] = false;",
													"        }",
													"    ",
													"   // postman.clearEnvironmentVariable('count');",
													"   // postman.clearEnvironmentVariable('IDs');",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts?page={{count}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "page",
													"value": "{{count}}",
													"equals": true
												}
											]
										},
										"description": ""
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?email={email_account} - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
													"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
													"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
													"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "dme.jmeter.backup@test.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123qwe!@",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?\"email\"=\"{{Email-Account-Personal}}\"",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "\"email\"",
													"value": "\"{{Email-Account-Personal}}\"",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?email={email_account} - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "dme.jmeter.backup@test.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123qwe!@",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?\"email\"=\"{{Email-Account-Backup}}\"",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "\"email\"",
													"value": "\"{{Email-Account-Backup}}\"",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?email={email_account} - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "dme.jmeter.backup@test.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123qwe!@",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?\"email\"=\"{{Email-Account-Archiver}}\"",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "\"email\"",
													"value": "\"{{Email-Account-Archiver}}\"",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "PATCH /api/accounts/{id} - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"type": "text",
													"value": "{{Email-Account-Archiver}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "1234asdF"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Archiver}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Archiver}}"
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "PATCH /api/accounts/{id} - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"type": "text",
													"value": "{{Email-Account-Backup}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "1234asdF"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}"
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "PATCH /api/accounts/{id} - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
													"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
													"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
													"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"type": "text",
													"value": "{{Email-Account-Personal}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "1234asdF"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Personal}}"
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/deactivate - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Archiver}}/deactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Archiver}}",
												"deactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/deactivate - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}/deactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}",
												"deactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "GET /api/accounts/deactivated_accounts - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deactivated_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deactivated_accounts"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "GET /api/accounts/deactivated_accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deactivated_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deactivated_accounts"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/reactivate - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Archiver}}/reactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Archiver}}",
												"reactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/reactivate - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}/reactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}",
												"reactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "DELETE /api/accounts backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"",
													"if (responseCode.code === 204) {",
													"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "DELETE /api/accounts personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"",
													"if (responseCode.code === 204) {",
													"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Personal}}"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/deleted_accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deleted_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deleted_accounts"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/deleted_accounts - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
													"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
													"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
													"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deleted_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deleted_accounts"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Office365",
							"description": "",
							"item": [
								{
									"name": "POST /api/accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/*var jsonData = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"Id-Account-Backup\", jsonData.id);",
													"postman.setEnvironmentVariable(\"Email-Account-Backup\", jsonData.email);",
													"",
													"tests[\"Status code is \" + responseCode.code] = responseCode.code === 201;",
													"tests[\"Response time \" + responseTime + \"ms is less than 20000ms\"] = responseTime < 20000;",
													"",
													"",
													"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
													"tests[\"Body matches string 'last_backup' is \" + responseBody.has(\"last_backup\")] = responseBody.has(\"last_backup\");",
													"tests[\"Body matches string 'deactivated_since' is \" + responseBody.has(\"deactivated_since\")] = responseBody.has(\"deactivated_since\");",
													"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
													"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
													"tests[\"Body matches string 'storage' is \" + responseBody.has(\"storage\")] = responseBody.has(\"storage\");",
													"tests[\"Body matches string 'msg_count' is \" + responseBody.has(\"msg_count\")] = responseBody.has(\"msg_count\");",
													"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
													"tests[\"Body matches string 'errors' is \" + responseBody.has(\"errors\")] = responseBody.has(\"errors\");",
													"tests[\"Body matches string 'user' is \" + responseBody.has(\"user\")] = responseBody.has(\"user\");",
													"tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
													"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
													"tests[\"Body matches string 'authentication_token' is \" + responseBody.has(\"authentication_token\")] = responseBody.has(\"authentication_token\");",
													"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
													"tests[\"Body matches string 'reseller_token' is \" + responseBody.has(\"reseller_token\")] = responseBody.has(\"reseller_token\");",
													"tests[\"Body matches string 'external_id' is \" + responseBody.has(\"external_id\")] = responseBody.has(\"external_id\");",
													"tests[\"Body matches string 'is_business' is \" + responseBody.has(\"is_business\")] = responseBody.has(\"is_business\");",
													"tests[\"Body matches string 'admin' is \" + responseBody.has(\"admin\")] = responseBody.has(\"admin\");",
													"tests[\"Body matches string 'customer_deactivated' is \" + responseBody.has(\"customer_deactivated\")] = responseBody.has(\"customer_deactivated\");",
													"tests[\"Body matches string 'seats_used' is \" + responseBody.has(\"seats_used\")] = responseBody.has(\"seats_used\");",
													"tests[\"Body matches string 'seats_available' is \" + responseBody.has(\"seats_available\")] = responseBody.has(\"seats_available\");",
													"tests[\"Body matches string 'storage_used' is \" + responseBody.has(\"storage_used\")] = responseBody.has(\"storage_used\");",
													"tests[\"Body matches string 'storage_available' is \" + responseBody.has(\"storage_available\")] = responseBody.has(\"storage_available\");",
													"tests[\"Body matches string 'archive' is \" + responseBody.has(\"archive\")] = responseBody.has(\"archive\");",
													"tests[\"Body matches string 'organization_id' is \" + responseBody.has(\"organization_id\")] = responseBody.has(\"organization_id\");",
													"tests[\"Body matches string 'backup_summary' is \" + responseBody.has(\"backup_summary\")] = responseBody.has(\"backup_summary\");",
													"tests[\"Body matches string 'login_disabled' is \" + responseBody.has(\"login_disabled\")] = responseBody.has(\"login_disabled\");",
													"tests[\"Body matches string 'flg_suspended' is \" + responseBody.has(\"flg_suspended\")] = responseBody.has(\"flg_suspended\");",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var res = typeof(jsonData) === \"object\";",
													"tests[\"Type data of '\" + jsonData + \"' is Object : \" + res] = res; ",
													"",
													"console.log(responseBody);",
													"*/",
													"",
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 201) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"last_backup\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"deactivated_since\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"email\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"display_name\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"username\": {",
													"              \"type\": \"null\"",
													"            },",
													"            \"storage\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"msg_count\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"flg_deleted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"errors\": {",
													"                \"type\": \"object\"",
													"            },",
													"            \"user\": {",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"email\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"authentication_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"reseller_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"external_id\": {",
													"                        \"type\": \"null\"",
													"                     },",
													"                    \"is_business\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"customer_deactivated\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"seats_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"seats_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"archive\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"organization_id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"backup_summary\": {",
													"                        \"type\": \"array\"",
													"                    },",
													"                    \"login_disabled\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"flg_suspended\": {",
													"                        \"type\": \"boolean\"",
													"                    }",
													"                },",
													"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"            }",
													"        },",
													"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"    };",
													"",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
													"    tests[\"archive should fill with false\"] = jsonData.user.archive === false;",
													"    ",
													"    postman.setEnvironmentVariable(\"Id-Account-Backup\", jsonData.id);",
													"    postman.setEnvironmentVariable(\"Email-Account-Backup\", jsonData.email);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts?email=di@dropmypc.com&password=dms12345@&send_sign_in_details=true&advanced_settings=true&protocol=office365",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "di@dropmypc.com",
													"equals": true
												},
												{
													"key": "password",
													"value": "dms12345@",
													"equals": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"equals": true
												},
												{
													"key": "advanced_settings",
													"value": "true",
													"equals": true
												},
												{
													"key": "protocol",
													"value": "office365",
													"equals": true
												}
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      //\"last_backup\": {",
													"        //\"type\": \"null\"",
													"      //},",
													"      //\"deactivated_since\": {",
													"        //\"type\": \"string\"",
													"      //},",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      //\"username\": {",
													"        //\"type\": \"null\"",
													"      //},",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?email={email_account} - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"response body conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "dme.jmeter.backup@test.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123qwe!@",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?email={{Email-Account-Backup}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "{{Email-Account-Backup}}",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "PATCH /api/accounts/{id} - backup sharemailbox o365",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}",
												"description": "reseller token"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}",
												"description": "end user auth token"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "blue.box@dropmypc.com",
													"type": "text",
													"description": "not mandatory",
													"disabled": true
												},
												{
													"key": "password",
													"value": "dms12345@",
													"type": "text",
													"description": "not mandatory"
												},
												{
													"key": "username",
													"value": "blue.box",
													"description": "not mandatory",
													"type": "text",
													"disabled": true
												},
												{
													"key": "advanced_settings",
													"value": "1",
													"description": "not mandatory",
													"type": "text",
													"disabled": true
												},
												{
													"key": "shared_mailbox",
													"value": "1",
													"description": "1 or 0, not mandatory",
													"type": "text"
												},
												{
													"key": "host",
													"value": "outlook.office365.com",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "port",
													"value": "993",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "o365_user_login",
													"value": "",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "shared_mailbox_login",
													"value": "ca@dropmypc.com",
													"description": "not mandatory, related to shared_mailbox.",
													"type": "text"
												},
												{
													"key": "shared_mailbox_type",
													"value": "o365",
													"description": "\"o365\" or \"cpanel\", not mandatory, related to shared_mailbox.",
													"type": "text"
												},
												{
													"key": "protocol",
													"value": "imap",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "security",
													"value": "ssl",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "oauth_token",
													"value": "",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "id",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/2335",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"2335"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "PATCH /api/accounts/{id} - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"type": "text",
													"value": "{{Email-Account-Backup}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "dms12345@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}"
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id} - backup sharemailbox o365",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}",
												"description": "reseller token"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}",
												"description": "end user auth token"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "blue.box@dropmypc.com",
													"type": "text",
													"description": "not mandatory",
													"disabled": true
												},
												{
													"key": "password",
													"value": "dms12345@",
													"type": "text",
													"description": "not mandatory"
												},
												{
													"key": "username",
													"value": "blue.box",
													"description": "not mandatory",
													"type": "text",
													"disabled": true
												},
												{
													"key": "advanced_settings",
													"value": "1",
													"description": "not mandatory",
													"type": "text",
													"disabled": true
												},
												{
													"key": "shared_mailbox",
													"value": "1",
													"description": "1 or 0, not mandatory",
													"type": "text"
												},
												{
													"key": "host",
													"value": "outlook.office365.com",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "port",
													"value": "993",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "o365_user_login",
													"value": "",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "shared_mailbox_login",
													"value": "ca@dropmypc.com",
													"description": "not mandatory, related to shared_mailbox.",
													"type": "text"
												},
												{
													"key": "shared_mailbox_type",
													"value": "o365",
													"description": "\"o365\" or \"cpanel\", not mandatory, related to shared_mailbox.",
													"type": "text"
												},
												{
													"key": "protocol",
													"value": "imap",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "security",
													"value": "ssl",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "oauth_token",
													"value": "",
													"description": "not mandatory, related to advanced_settings.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "id",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/2335",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"2335"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/deactivate - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}/deactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}",
												"deactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "GET /api/accounts/deactivated_accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      //\"last_backup\": {",
													"        //\"type\": \"string\"",
													"      //},",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      //\"username\": {",
													"        //\"type\": \"null\"",
													"      //},",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deactivated_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deactivated_accounts"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/reactivate - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}/reactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}",
												"reactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "DELETE /api/accounts backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"",
													"if (responseCode.code === 204) {",
													"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/deleted_accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + responseBody.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-1}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup-Statis}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deleted_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deleted_accounts"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Other with advanced settings",
							"description": "",
							"item": [
								{
									"name": "POST /api/accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 201) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"last_backup\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"deactivated_since\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"email\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"display_name\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"username\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"storage\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"msg_count\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"flg_deleted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"errors\": {",
													"                \"type\": \"object\"",
													"            },",
													"            \"user\": {",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"email\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"authentication_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"reseller_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"external_id\": {",
													"                        \"type\": \"null\"",
													"                     },",
													"                    \"is_business\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"customer_deactivated\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"seats_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"seats_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"archive\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"organization_id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"backup_summary\": {",
													"                        \"type\": \"array\"",
													"                    },",
													"                    \"login_disabled\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"flg_suspended\": {",
													"                        \"type\": \"boolean\"",
													"                    }",
													"                },",
													"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"            }",
													"        },",
													"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"    };",
													"",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
													"    tests[\"archive should fill with false\"] = jsonData.user.archive === false;",
													"    ",
													"    postman.setEnvironmentVariable(\"Id-Account-Backup\", jsonData.id);",
													"    postman.setEnvironmentVariable(\"Email-Account-Backup\", jsonData.email);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts?email=randombackup{{$timestamp}}%40gmail.com&username=prasetyanto.backup01&password=backup123&send_sign_in_details=true&display_name=pras backup {{$timestamp}}&advanced_settings=1&host=imap.gmail.com&port=993&security=ssl",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "randombackup{{$timestamp}}%40gmail.com",
													"equals": true
												},
												{
													"key": "username",
													"value": "prasetyanto.backup01",
													"equals": true
												},
												{
													"key": "password",
													"value": "backup123",
													"equals": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"equals": true
												},
												{
													"key": "display_name",
													"value": "pras backup {{$timestamp}}",
													"equals": true
												},
												{
													"key": "advanced_settings",
													"value": "1",
													"equals": true
												},
												{
													"key": "host",
													"value": "imap.gmail.com",
													"equals": true
												},
												{
													"key": "port",
													"value": "993",
													"equals": true
												},
												{
													"key": "security",
													"value": "ssl",
													"equals": true
												}
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "POST /api/accounts - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 201) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"last_backup\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"deactivated_since\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"email\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"display_name\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"username\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"storage\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"msg_count\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"flg_deleted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"errors\": {",
													"                \"type\": \"object\"",
													"            },",
													"            \"user\": {",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"email\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"authentication_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"reseller_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"external_id\": {",
													"                        \"type\": \"null\"",
													"                     },",
													"                    \"is_business\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"customer_deactivated\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"seats_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"seats_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"archive\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"organization_id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"backup_summary\": {",
													"                        \"type\": \"array\"",
													"                    },",
													"                    \"login_disabled\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"flg_suspended\": {",
													"                        \"type\": \"boolean\"",
													"                    }",
													"                },",
													"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"            },",
													"        },",
													"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"    };",
													"",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
													"    tests[\"archive should fill with true\"] = jsonData.user.archive === true;",
													"    ",
													"    postman.setEnvironmentVariable(\"Id-Account-Archiver\", jsonData.id);",
													"    postman.setEnvironmentVariable(\"Email-Account-Archiver\", jsonData.email);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts?email=randomarchiver{{$timestamp}}%40gmail.com&username=prasetyanto.archiver01&password=archiver123&send_sign_in_details=true&display_name=pras archiver {{$timestamp}}&advanced_settings=1&host=imap.gmail.com&port=993&security=ssl",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "randomarchiver{{$timestamp}}%40gmail.com",
													"equals": true
												},
												{
													"key": "username",
													"value": "prasetyanto.archiver01",
													"equals": true
												},
												{
													"key": "password",
													"value": "archiver123",
													"equals": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"equals": true
												},
												{
													"key": "display_name",
													"value": "pras archiver {{$timestamp}}",
													"equals": true
												},
												{
													"key": "advanced_settings",
													"value": "1",
													"equals": true
												},
												{
													"key": "host",
													"value": "imap.gmail.com",
													"equals": true
												},
												{
													"key": "port",
													"value": "993",
													"equals": true
												},
												{
													"key": "security",
													"value": "ssl",
													"equals": true
												}
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "POST /api/accounts - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 201) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"last_backup\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"deactivated_since\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"email\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"display_name\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"username\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"storage\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"msg_count\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"flg_deleted\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"errors\": {",
													"                \"type\": \"object\"",
													"            },",
													"            \"user\": {",
													"                \"properties\": {",
													"                    \"id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"email\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"authentication_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"reseller_token\": {",
													"                        \"type\": \"string\"",
													"                    },",
													"                    \"external_id\": {",
													"                        \"type\": \"string\"",
													"                     },",
													"                    \"is_business\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"customer_deactivated\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"seats_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"seats_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_used\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"storage_available\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"archive\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"organization_id\": {",
													"                        \"type\": \"integer\"",
													"                    },",
													"                    \"backup_summary\": {",
													"                        \"type\": \"array\"",
													"                    },",
													"                    \"login_disabled\": {",
													"                        \"type\": \"boolean\"",
													"                    },",
													"                    \"flg_suspended\": {",
													"                        \"type\": \"boolean\"",
													"                    }",
													"                },",
													"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"            },",
													"        },",
													"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"    };",
													"",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
													"    tests[\"archive should fill with false\"] = jsonData.user.archive === false;",
													"    ",
													"    postman.setEnvironmentVariable(\"Id-Account-Personal\", jsonData.id);",
													"    postman.setEnvironmentVariable(\"Email-Account-Personal\", jsonData.email);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts?email=randompersonal{{$timestamp}}%40gmail.com&username=prasetyanto.personal01&password=personal123&send_sign_in_details=true&display_name=pras personal {{$timestamp}}&advanced_settings=1&host=imap.gmail.com&port=993&security=ssl",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "randompersonal{{$timestamp}}%40gmail.com",
													"equals": true
												},
												{
													"key": "username",
													"value": "prasetyanto.personal01",
													"equals": true
												},
												{
													"key": "password",
													"value": "personal123",
													"equals": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"equals": true
												},
												{
													"key": "display_name",
													"value": "pras personal {{$timestamp}}",
													"equals": true
												},
												{
													"key": "advanced_settings",
													"value": "1",
													"equals": true
												},
												{
													"key": "host",
													"value": "imap.gmail.com",
													"equals": true
												},
												{
													"key": "port",
													"value": "993",
													"equals": true
												},
												{
													"key": "security",
													"value": "ssl",
													"equals": true
												}
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?username={username} - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (responseCode.code === 200 && responseBody !== \"[]\") {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    ",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"    tests[\"Theres new account archiver created by username \"] = responseBody.has(\"prasetyanto.archiver01\");",
													"",
													"}else if (responseCode.code === 200){",
													"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
													"}else {",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"    console.log(jsonData.length);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?username=prasetyanto.archiver01",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "username",
													"value": "prasetyanto.archiver01",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?username={username} - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (responseCode.code === 200 && responseBody !== \"[]\") {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    ",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"    tests[\"Theres new account backup created by username \"] = responseBody.has(\"prasetyanto.backup01\");",
													"",
													"}else if (responseCode.code === 200){",
													"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
													"}else {",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"    console.log(jsonData.length);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?username=prasetyanto.backup01",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "username",
													"value": "prasetyanto.backup01",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?username={username} - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (responseCode.code === 200 && responseBody !== \"[]\") {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    ",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    ",
													"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
													"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
													"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
													"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
													"    tests[\"Theres new account personal created by username \"] = responseBody.has(\"prasetyanto.personal01\");",
													"",
													"}else if (responseCode.code === 200){",
													"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
													"}else {",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"    console.log(jsonData.length);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?username=prasetyanto.personal01",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "username",
													"value": "prasetyanto.personal01",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?email={email_account} - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (responseCode.code === 200 && responseBody !== \"[]\") {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    ",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    ",
													"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
													"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
													"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
													"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
													"",
													"}else if (responseCode.code === 200){",
													"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
													"}else {",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"    console.log(jsonData.length);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "dme.jmeter.backup@test.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123qwe!@",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?email={{Email-Account-Personal}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "{{Email-Account-Personal}}",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?email={email_account} - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (responseCode.code === 200 && responseBody !== \"[]\") {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    ",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else if (responseCode.code === 200){",
													"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
													"}else {",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"    console.log(jsonData.length);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "dme.jmeter.backup@test.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123qwe!@",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?email={{Email-Account-Backup}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "{{Email-Account-Backup}}",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/accounts?email={email_account} - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (responseCode.code === 200 && responseBody !== \"[]\") {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    ",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"",
													"}else if (responseCode.code === 200){",
													"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
													"}else {",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"    console.log(jsonData.length);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "dme.jmeter.backup@test.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123qwe!@",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts?email={{Email-Account-Archiver}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts"
											],
											"query": [
												{
													"key": "email",
													"value": "{{Email-Account-Archiver}}",
													"equals": true
												}
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "PATCH /api/accounts/{id} - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "randombackup{{$timestamp}}%40gmail.com",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "username",
													"value": "prasetyanto.archiver01",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "password",
													"value": "archiver123",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "display_name",
													"value": "pras archiver {{$timestamp}}",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "advanced_settings",
													"value": "1",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "host",
													"value": "imap.gmail.com",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "port",
													"value": "993",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "security",
													"value": "ssl",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{Email-Account-Archiver}}",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "password",
													"value": "archiver123",
													"type": "text",
													"description": ""
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Archiver}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Archiver}}"
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "PATCH /api/accounts/{id} - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "randombackup{{$timestamp}}%40gmail.com",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "username",
													"value": "prasetyanto.backup01",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "password",
													"value": "archiver123",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "display_name",
													"value": "pras backup {{$timestamp}}",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "advanced_settings",
													"value": "1",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "host",
													"value": "imap.gmail.com",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "port",
													"value": "993",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "security",
													"value": "ssl",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{Email-Account-backup}}",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "password",
													"value": "backup123",
													"type": "text",
													"description": ""
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}"
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "PATCH /api/accounts/{id} - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"    ",
													"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
													"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
													"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
													"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "randombackup{{$timestamp}}%40gmail.com",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "username",
													"value": "prasetyanto.personal01",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "password",
													"value": "personal123",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "send_sign_in_details",
													"value": "true",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "display_name",
													"value": "pras personal {{$timestamp}}",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "advanced_settings",
													"value": "1",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "host",
													"value": "imap.gmail.com",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "port",
													"value": "993",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "security",
													"value": "ssl",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "email",
													"value": "{{Email-Account-Personal}}",
													"type": "text",
													"description": "",
													"disabled": true
												},
												{
													"key": "password",
													"value": "personal123",
													"type": "text",
													"description": ""
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Personal}}"
											]
										},
										"description": "Add an email account to backup"
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/deactivate - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Archiver}}/deactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Archiver}}",
												"deactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/deactivate - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}/deactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}",
												"deactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "GET /api/accounts/deactivated_accounts - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_archiver = pm.environment.get(\"Id-Account-Archiver\")",
													"    var email_account_archiver = pm.environment.get(\"Email-Account-Archiver\")",
													"    tests[\"Theres new account archiver created by id \"] = responseBody.has(id_account_archiver);",
													"    tests[\"Theres new account archiver created by email \"] = responseBody.has(email_account_archiver);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deactivated_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deactivated_accounts"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "GET /api/accounts/deactivated_accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deactivated_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deactivated_accounts"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/reactivate - archiver",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"response body conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Archiver}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Archiver}}/reactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Archiver}}",
												"reactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "PUT /api/accounts/{id}/reactivate - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"username\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"response body conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}/reactivate",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}",
												"reactivate"
											]
										},
										"description": "Returns an array of user objects."
									},
									"response": []
								},
								{
									"name": "DELETE /api/accounts backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"",
													"if (responseCode.code === 204) {",
													"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Backup}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Backup}}"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "DELETE /api/accounts personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"",
													"if (responseCode.code === 204) {",
													"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {},
										"url": {
											"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"{{Id-Account-Personal}}"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/deleted_accounts - backup",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      //\"username\": {",
													"        //\"type\": \"string\"",
													"      //},",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"null\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_backup = pm.environment.get(\"Id-Account-Backup\")",
													"    var email_account_backup = pm.environment.get(\"Email-Account-Backup\")",
													"    tests[\"Theres new account backup created by id \"] = responseBody.has(id_account_backup);",
													"    tests[\"Theres new account backup created by email \"] = responseBody.has(email_account_backup);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Backup}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deleted_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deleted_accounts"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								},
								{
									"name": "GET /api/deleted_accounts - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"var schema = ",
													"{",
													"    \"properties\": {",
													"      \"id\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"last_backup\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"deactivated_since\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"email\": {",
													"        \"type\": \"string\"",
													"      },",
													"      \"display_name\": {",
													"        \"type\": \"null\"",
													"      },",
													"      //\"username\": {",
													"        //\"type\": \"string\"",
													"      //},",
													"      \"storage\": {",
													"        \"type\": \"integer\"",
													"      },",
													"      \"msg_count\": {",
													"        \"type\": \"null\"",
													"      },",
													"      \"flg_deleted\": {",
													"        \"type\": \"boolean\"",
													"      },",
													"      \"errors\": {",
													"        \"type\": \"object\"",
													"      },",
													"      \"user\": {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"          \"id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"email\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"authentication_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"reseller_token\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"external_id\": {",
													"            \"type\": \"string\"",
													"          },",
													"          \"is_business\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"admin\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"customer_deactivated\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"seats_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"seats_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_used\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"storage_available\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"archive\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"organization_id\": {",
													"            \"type\": \"integer\"",
													"          },",
													"          \"backup_summary\": {",
													"            \"type\": \"array\"",
													"          },",
													"          \"login_disabled\": {",
													"            \"type\": \"boolean\"",
													"          },",
													"          \"flg_suspended\": {",
													"            \"type\": \"boolean\"",
													"          }",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"      }",
													"    },",
													"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
													"}",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
													"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
													"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
													"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/accounts/deleted_accounts",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"accounts",
												"deleted_accounts"
											]
										},
										"description": "Returns an array of accounts"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "journals",
					"item": [
						{
							"name": "GET /api/journals",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/journals",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"journals"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "POST /api/journals",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-Archiver}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/journals",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"journals"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "PATCH /api/journals",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"type": "text",
											"value": "dme.jmeter.backup@test.com"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123qwe!@"
										},
										{
											"key": "id",
											"type": "text",
											"value": "{{Id-Journal}}"
										}
									]
								},
								"url": {
									"raw": "{{hosts}}/api/journals{{Id-Journal}}",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"journals{{Id-Journal}}"
									]
								},
								"description": "Generate single sign on link"
							},
							"response": []
						},
						{
							"name": "https://mailer.dropmyemail.com/api/v1/journal_recipients",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "e8715570-3af4-4043-977f-4e5d02b8ce8b"
									},
									{
										"key": "X-Access-Token",
										"value": "881dd150-3547-4f4c-9e1b-f569dda7916a"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user",
											"type": "text",
											"value": "email.account.01"
										},
										{
											"key": "password",
											"type": "text",
											"value": "123123123"
										}
									]
								},
								"url": {
									"raw": "https://mailer.dropmyemail.com/api/v1/journal_recipients",
									"protocol": "https",
									"host": [
										"mailer",
										"dropmyemail",
										"com"
									],
									"path": [
										"api",
										"v1",
										"journal_recipients"
									]
								},
								"description": null
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Delete Users & Account",
			"item": [
				{
					"name": "POST /api/accounts - personal for delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseCode.code === 201) {",
									"    var schema = {",
									"        \"properties\": {",
									"            \"id\": {",
									"                \"type\": \"integer\"",
									"             },",
									"            \"last_backup\": {",
									"                \"type\": \"null\"",
									"            },",
									"            \"deactivated_since\": {",
									"                \"type\": \"null\"",
									"            },",
									"            \"email\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"display_name\": {",
									"                \"type\": \"null\"",
									"            },",
									"            \"username\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"storage\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"msg_count\": {",
									"                \"type\": \"null\"",
									"            },",
									"            \"flg_deleted\": {",
									"                \"type\": \"boolean\"",
									"            },",
									"            \"errors\": {",
									"                \"type\": \"object\"",
									"            },",
									"            \"user\": {",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"type\": \"integer\"",
									"                    },",
									"                    \"email\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"authentication_token\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"reseller_token\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"external_id\": {",
									"                        \"type\": \"string\"",
									"                     },",
									"                    \"is_business\": {",
									"                        \"type\": \"boolean\"",
									"                    },",
									"                    \"customer_deactivated\": {",
									"                        \"type\": \"boolean\"",
									"                    },",
									"                    \"seats_used\": {",
									"                        \"type\": \"integer\"",
									"                    },",
									"                    \"seats_available\": {",
									"                        \"type\": \"integer\"",
									"                    },",
									"                    \"storage_used\": {",
									"                        \"type\": \"integer\"",
									"                    },",
									"                    \"storage_available\": {",
									"                        \"type\": \"integer\"",
									"                    },",
									"                    \"archive\": {",
									"                        \"type\": \"boolean\"",
									"                    },",
									"                    \"organization_id\": {",
									"                        \"type\": \"integer\"",
									"                    },",
									"                    \"backup_summary\": {",
									"                        \"type\": \"array\"",
									"                    },",
									"                    \"login_disabled\": {",
									"                        \"type\": \"boolean\"",
									"                    },",
									"                    \"flg_suspended\": {",
									"                        \"type\": \"boolean\"",
									"                    }",
									"                },",
									"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
									"            },",
									"        },",
									"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
									"    };",
									"",
									"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
									"    if (!valid_schema) {",
									"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
									"    }else{",
									"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
									"    }",
									"    ",
									"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
									"    tests[\"archive should fill with false\"] = jsonData.user.archive === false;",
									"    ",
									"    postman.setEnvironmentVariable(\"Id-Account-Personal\", jsonData.id);",
									"    postman.setEnvironmentVariable(\"Email-Account-Personal\", jsonData.email);",
									"",
									"}else{",
									"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Personal}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/accounts?email=prasetyanto.dheka01%2B{{$timestamp}}%40gmail.com&password=1234asdF&send_sign_in_details=true",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts"
							],
							"query": [
								{
									"key": "email",
									"value": "prasetyanto.dheka01%2B{{$timestamp}}%40gmail.com",
									"equals": true
								},
								{
									"key": "password",
									"value": "1234asdF",
									"equals": true
								},
								{
									"key": "send_sign_in_details",
									"value": "true",
									"equals": true
								}
							]
						},
						"description": "Add an email account to backup"
					},
					"response": []
				},
				{
					"name": "DELETE /api/account/{id}/immediate_delete - personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"if (responseCode.code === 204) {",
									"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
									"}else{",
									"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Personal}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}/immediate_delete",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"accounts",
								"{{Id-Account-Personal}}",
								"immediate_delete"
							]
						},
						"description": "unsubscribe a user."
					},
					"response": []
				},
				{
					"name": "DELETE /api/users/{id}/immediate_delete - personal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
									"",
									"if (responseCode.code === 204) {",
									"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
									"}else{",
									"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Reseller-Token",
								"value": "{{X-Reseller-Token}}"
							},
							{
								"key": "X-Access-Token",
								"value": "{{X-Access-Token-Reseller}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/immediate_delete",
							"host": [
								"{{hosts}}"
							],
							"path": [
								"api",
								"users",
								"{{Id-User-Personal}}",
								"immediate_delete"
							]
						},
						"description": "unsubscribe a user."
					},
					"response": []
				}
			]
		},
		{
			"name": "UOL",
			"description": "",
			"item": [
				{
					"name": "Reseller",
					"description": "All api reseller",
					"item": [
						{
							"name": "plans copy",
							"item": [
								{
									"name": "POST /api/plans - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 201) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"name\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"currency\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"data_storage\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"periodicity\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"amount\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"product_type\": {",
													"                \"type\": \"string\"",
													"            }",
													"        },",
													"        \"required\": [\"id\", \"name\",\"currency\", \"data_storage\", \"periodicity\", \"amount\", \"product_type\"]",
													"    };",
													"",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"        }else{",
													"            tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"        }",
													"",
													"    tests[\"Name should fill with res-personal-api \"] = jsonData.name === \"res-personal-api\";",
													"    tests[\"Currency should fill with USD\"] = jsonData.currency === \"USD\";",
													"    tests[\"Data_storage should fill with 6.0\"] = jsonData.data_storage === \"6.0\";",
													"    tests[\"Periodicity should fill with 1 month\"] = jsonData.periodicity === \"1 month\";",
													"    tests[\"Amount should fill with 1.0\"] = jsonData.amount === \"1.0\";",
													"    tests[\"Product_type should fill with res_personal\"] = jsonData.product_type === \"res_personal\";",
													"    ",
													"    postman.setEnvironmentVariable(\"Id-Plan-Personal\", jsonData.id);",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-UOL}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-UOL}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "res-personal-api",
													"type": "text"
												},
												{
													"key": "product_type",
													"value": "res_personal",
													"type": "text"
												},
												{
													"key": "amount",
													"value": "1.0",
													"type": "text"
												},
												{
													"key": "data_storage",
													"value": "6",
													"type": "text"
												},
												{
													"key": "currency",
													"value": "USD",
													"type": "text"
												},
												{
													"key": "periodicity",
													"value": "monthly",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/plans",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"plans"
											]
										},
										"description": "Creates a new plans."
									},
									"response": []
								},
								{
									"name": "GET /api/plans",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200) {",
													"    var id_personal = pm.environment.get(\"Id-Plan-Personal\")",
													"    var id_backup = pm.environment.get(\"Id-Plan-Backup\")",
													"    var id_archiver = pm.environment.get(\"Id-Plan-Archiver\")",
													"    ",
													"    tests[\"Theres new plans personal created \"] = responseBody.has(id_personal);",
													"",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"name\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"currency\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"data_storage\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"periodicity\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"amount\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"product_type\": {",
													"                \"type\": \"string\"",
													"            }",
													"        },",
													"        \"required\": [\"id\", \"name\",\"currency\", \"data_storage\", \"periodicity\", \"amount\", \"product_type\"]",
													"    };",
													"",
													"    jsonData.forEach(function(post) {",
													"    var valid_schema = tv4.validateResult(post, schema).valid;",
													"        if (!valid_schema) {",
													"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
													"        }else{",
													"            tests[\"Plan id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
													"        }",
													"    });",
													"    ",
													"    ",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-UOL}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-UOL}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/plans",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"plans"
											]
										},
										"description": "Return an array of plans."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "users",
							"item": [
								{
									"name": "POST /api/users - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 201) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"email\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"authentication_token\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"organization_id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"reseller_token\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"notification_email\": {",
													"              \"type\": \"array\"",
													"            },",
													"            \"external_id\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"is_bussiness\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"admin\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"customer_deactivated\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"seats_used\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"seats_available\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"storage_used\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"storage_available\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"archive\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"backup_summary\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"login_disabled\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"flg_suspende\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"    };",
													"",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    tests[\"seats_available should fill with 1\"] = jsonData.seats_available === 1;",
													"    tests[\"archive should fill with false\"] = jsonData.archive === false;",
													"    ",
													"    postman.setEnvironmentVariable(\"X-Access-Token-Personal\", jsonData.authentication_token);",
													"    postman.setEnvironmentVariable(\"Id-User-Personal\", jsonData.id);",
													"    postman.setEnvironmentVariable(\"Email-User-Personal\", jsonData.email);",
													"",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-UOL}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-UOL}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"description": "mandatory",
													"key": "email",
													"type": "text",
													"value": "prasetyanto.personal01+{{$timestamp}}@gmail.com"
												},
												{
													"description": "mandatory",
													"key": "plan_id",
													"type": "text",
													"value": "{{Id-Plan-Personal}}"
												},
												{
													"description": "mandatory",
													"key": "time_zone",
													"type": "text",
													"value": "Hanoi"
												},
												{
													"description": "mandatory for backup and archive, personal do not need this and will be ignored.",
													"key": "seats",
													"type": "text",
													"value": "1",
													"disabled": true
												},
												{
													"description": "mandatory for backup and archive",
													"key": "first_name",
													"type": "text",
													"value": "test"
												},
												{
													"description": "mandatory for backup and archive",
													"key": "last_name",
													"type": "text",
													"value": "user"
												},
												{
													"description": "mandatory for backup and archive",
													"key": "organization_attributes[name]",
													"type": "text",
													"value": "api archiver 2",
													"disabled": true
												},
												{
													"key": "external_id",
													"type": "text",
													"value": "api{{$randomInt}}",
													"disabled": true
												},
												{
													"key": "send_sign_in_details",
													"type": "text",
													"value": "true"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/users",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"users"
											]
										},
										"description": "Creates a new plans."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "End Users",
					"description": "All API end users",
					"item": [
						{
							"name": "users",
							"item": [
								{
									"name": "GET /api/users/generate_redirect_link - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (responseCode.code === 200){",
													"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
													"",
													"    tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"",
													"    tests[\"Body matches string 'redirect_url' is \" + responseBody.has(\"redirect_url\")] = responseBody.has(\"redirect_url\");",
													"",
													"} else {",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-UOL}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"type": "text",
													"value": "dme.jmeter.backup@test.com"
												},
												{
													"key": "password",
													"type": "text",
													"value": "123qwe!@"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/users/generate_redirect_link",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"users",
												"generate_redirect_link"
											]
										},
										"description": "Generate single sign on link"
									},
									"response": []
								},
								{
									"name": "PATCH /api/users/{id} - personal",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseCode.code === 200 && jsonData !== null) {",
													"    var schema = {",
													"        \"properties\": {",
													"            \"id\": {",
													"                \"type\": \"integer\"",
													"             },",
													"            \"email\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"authentication_token\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"organization_id\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"reseller_token\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"notification_email\": {",
													"              \"type\": \"array\"",
													"            },",
													"            \"external_id\": {",
													"                \"type\": \"string\"",
													"            },",
													"            \"is_bussiness\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"admin\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"customer_deactivated\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"seats_used\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"seats_available\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"storage_used\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"storage_available\": {",
													"                \"type\": \"integer\"",
													"            },",
													"            \"archive\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"backup_summary\": {",
													"                \"type\": \"null\"",
													"            },",
													"            \"login_disabled\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"            \"flg_suspende\": {",
													"                \"type\": \"boolean\"",
													"            },",
													"        },",
													"        \"required\": [\"id\", \"email\",\"authentication_token\", \"organization_id\", \"reseller_token\", \"notification_email\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
													"    };",
													"",
													"        ",
													"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
													"    if (!valid_schema) {",
													"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
													"    }else{",
													"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
													"    }",
													"    ",
													"    tests[\"response body seats_available should fill with 1\"] = jsonData.seats_available === 1;",
													"    tests[\"response body archive should fill with false\"] = jsonData.archive === false;",
													"    tests[\"response body email should be \" + pm.environment.get(\"Email-User-Personal\")] = jsonData.email.has(pm.environment.get(\"Email-User-Personal\"))",
													"}else if (responseCode.code === 200){",
													"    tests[\"Failed, status code is \" + responseCode.code + \" but response body is \" + responseBody] = false;",
													"}else{",
													"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Reseller-Token",
												"value": "{{X-Reseller-Token-UOL}}"
											},
											{
												"key": "X-Access-Token",
												"value": "{{X-Access-Token-Personal}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"description": "string",
													"key": "notification_email",
													"type": "text",
													"value": "",
													"disabled": true
												},
												{
													"description": "required, integer",
													"key": "id",
													"type": "text",
													"value": "{{Id-User-Personal}}"
												},
												{
													"description": "string",
													"key": "external_id",
													"type": "text",
													"value": "Personal_{{$timestamp}}"
												}
											]
										},
										"url": {
											"raw": "{{hosts}}/api/users/{{Id-User-Personal}}",
											"host": [
												"{{hosts}}"
											],
											"path": [
												"api",
												"users",
												"{{Id-User-Personal}}"
											]
										},
										"description": "update user external id."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "accounts",
							"item": [
								{
									"name": "Other with advanced settings",
									"description": "",
									"item": [
										{
											"name": "POST /api/accounts - personal with oauth",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"if (responseCode.code === 201) {",
															"    var schema = {",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"integer\"",
															"             },",
															"            \"last_backup\": {",
															"                \"type\": \"null\"",
															"            },",
															"            \"deactivated_since\": {",
															"                \"type\": \"null\"",
															"            },",
															"            \"email\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"display_name\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"username\": {",
															"              \"type\": \"null\"",
															"            },",
															"            \"storage\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"msg_count\": {",
															"                \"type\": \"null\"",
															"            },",
															"            \"flg_deleted\": {",
															"                \"type\": \"boolean\"",
															"            },",
															"            \"errors\": {",
															"                \"type\": \"object\"",
															"            },",
															"            \"user\": {",
															"                \"properties\": {",
															"                    \"id\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"email\": {",
															"                        \"type\": \"string\"",
															"                    },",
															"                    \"authentication_token\": {",
															"                        \"type\": \"string\"",
															"                    },",
															"                    \"reseller_token\": {",
															"                        \"type\": \"string\"",
															"                    },",
															"                    \"external_id\": {",
															"                        \"type\": \"string\"",
															"                     },",
															"                    \"is_business\": {",
															"                        \"type\": \"boolean\"",
															"                    },",
															"                    \"customer_deactivated\": {",
															"                        \"type\": \"boolean\"",
															"                    },",
															"                    \"seats_used\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"seats_available\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"storage_used\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"storage_available\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"archive\": {",
															"                        \"type\": \"boolean\"",
															"                    },",
															"                    \"organization_id\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"backup_summary\": {",
															"                        \"type\": \"array\"",
															"                    },",
															"                    \"login_disabled\": {",
															"                        \"type\": \"boolean\"",
															"                    },",
															"                    \"flg_suspended\": {",
															"                        \"type\": \"boolean\"",
															"                    }",
															"                },",
															"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"            },",
															"        },",
															"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"    };",
															"",
															"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
															"    if (!valid_schema) {",
															"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
															"    }else{",
															"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
															"    }",
															"    ",
															"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
															"    tests[\"archive should fill with false\"] = jsonData.user.archive === false;",
															"    ",
															"    postman.setEnvironmentVariable(\"Id-Account-Personal\", jsonData.id);",
															"    postman.setEnvironmentVariable(\"Email-Account-Personal\", jsonData.email);",
															"",
															"}else{",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{hosts}}/api/accounts?email=v.homsi.mora@uol.com.br&oauth_type=uol&oauth_token=a13b68ec55b440cc97e3503a50b09a84:2.0-587a3859493878717474454a514e7a695977326378513d3d-5499-b1a54def2772793b832585cf0c4bf33fc8c10a5b2d6ca5f4c5255fb19165c906655e0178c7a1d3deae10909224904305bc7aacb5dcf1661d5f86dece259837a4&advanced_settings=1&host=imap.uol.com.br&port=993&protocol=imap&security=ssl&display_name=v.homsi.mora",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts"
													],
													"query": [
														{
															"key": "email",
															"value": "v.homsi.mora@uol.com.br",
															"equals": true
														},
														{
															"key": "oauth_type",
															"value": "uol",
															"equals": true
														},
														{
															"key": "oauth_token",
															"value": "a13b68ec55b440cc97e3503a50b09a84:2.0-587a3859493878717474454a514e7a695977326378513d3d-5499-b1a54def2772793b832585cf0c4bf33fc8c10a5b2d6ca5f4c5255fb19165c906655e0178c7a1d3deae10909224904305bc7aacb5dcf1661d5f86dece259837a4",
															"equals": true
														},
														{
															"key": "advanced_settings",
															"value": "1",
															"equals": true
														},
														{
															"key": "host",
															"value": "imap.uol.com.br",
															"equals": true
														},
														{
															"key": "port",
															"value": "993",
															"equals": true
														},
														{
															"key": "protocol",
															"value": "imap",
															"equals": true
														},
														{
															"key": "security",
															"value": "ssl",
															"equals": true
														},
														{
															"key": "display_name",
															"value": "v.homsi.mora",
															"equals": true
														},
														{
															"key": "username",
															"value": "prasetyanto.personal01",
															"equals": true,
															"disabled": true
														},
														{
															"key": "password",
															"value": "personal123",
															"equals": true,
															"disabled": true
														},
														{
															"key": "send_sign_in_details",
															"value": "true",
															"equals": true,
															"disabled": true
														}
													]
												},
												"description": "Add an email account to backup"
											},
											"response": []
										},
										{
											"name": "POST /api/accounts - personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"if (responseCode.code === 201) {",
															"    var schema = {",
															"        \"properties\": {",
															"            \"id\": {",
															"                \"type\": \"integer\"",
															"             },",
															"            \"last_backup\": {",
															"                \"type\": \"null\"",
															"            },",
															"            \"deactivated_since\": {",
															"                \"type\": \"null\"",
															"            },",
															"            \"email\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"display_name\": {",
															"                \"type\": \"string\"",
															"            },",
															"            \"username\": {",
															"              \"type\": \"string\"",
															"            },",
															"            \"storage\": {",
															"                \"type\": \"integer\"",
															"            },",
															"            \"msg_count\": {",
															"                \"type\": \"null\"",
															"            },",
															"            \"flg_deleted\": {",
															"                \"type\": \"boolean\"",
															"            },",
															"            \"errors\": {",
															"                \"type\": \"object\"",
															"            },",
															"            \"user\": {",
															"                \"properties\": {",
															"                    \"id\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"email\": {",
															"                        \"type\": \"string\"",
															"                    },",
															"                    \"authentication_token\": {",
															"                        \"type\": \"string\"",
															"                    },",
															"                    \"reseller_token\": {",
															"                        \"type\": \"string\"",
															"                    },",
															"                    \"external_id\": {",
															"                        \"type\": \"string\"",
															"                     },",
															"                    \"is_business\": {",
															"                        \"type\": \"boolean\"",
															"                    },",
															"                    \"customer_deactivated\": {",
															"                        \"type\": \"boolean\"",
															"                    },",
															"                    \"seats_used\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"seats_available\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"storage_used\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"storage_available\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"archive\": {",
															"                        \"type\": \"boolean\"",
															"                    },",
															"                    \"organization_id\": {",
															"                        \"type\": \"integer\"",
															"                    },",
															"                    \"backup_summary\": {",
															"                        \"type\": \"array\"",
															"                    },",
															"                    \"login_disabled\": {",
															"                        \"type\": \"boolean\"",
															"                    },",
															"                    \"flg_suspended\": {",
															"                        \"type\": \"boolean\"",
															"                    }",
															"                },",
															"                \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"            },",
															"        },",
															"        \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"    };",
															"",
															"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
															"    if (!valid_schema) {",
															"        tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
															"    }else{",
															"        tests[\"Result body conform to schema\"] = tv4.validate(jsonData, schema);",
															"    }",
															"    ",
															"    tests[\"seats_available should fill with 1\"] = jsonData.user.seats_available === 1;",
															"    tests[\"archive should fill with false\"] = jsonData.user.archive === false;",
															"    ",
															"    postman.setEnvironmentVariable(\"Id-Account-Personal\", jsonData.id);",
															"    postman.setEnvironmentVariable(\"Email-Account-Personal\", jsonData.email);",
															"",
															"}else{",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 201\"] = responseCode.code === 201;",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{hosts}}/api/accounts?email=randompersonal{{$timestamp}}%40gmail.com&username=prasetyanto.personal01&password=personal123&send_sign_in_details=true&display_name=pras personal {{$timestamp}}&advanced_settings=1&host=imap.gmail.com&port=993&security=ssl",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts"
													],
													"query": [
														{
															"key": "email",
															"value": "randompersonal{{$timestamp}}%40gmail.com",
															"equals": true
														},
														{
															"key": "username",
															"value": "prasetyanto.personal01",
															"equals": true
														},
														{
															"key": "password",
															"value": "personal123",
															"equals": true
														},
														{
															"key": "send_sign_in_details",
															"value": "true",
															"equals": true
														},
														{
															"key": "display_name",
															"value": "pras personal {{$timestamp}}",
															"equals": true
														},
														{
															"key": "advanced_settings",
															"value": "1",
															"equals": true
														},
														{
															"key": "host",
															"value": "imap.gmail.com",
															"equals": true
														},
														{
															"key": "port",
															"value": "993",
															"equals": true
														},
														{
															"key": "security",
															"value": "ssl",
															"equals": true
														}
													]
												},
												"description": "Add an email account to backup"
											},
											"response": []
										},
										{
											"name": "GET /api/accounts?username={username} - personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (responseCode.code === 200 && responseBody !== \"[]\") {",
															"var schema = ",
															"{",
															"    \"properties\": {",
															"      \"id\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"last_backup\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"deactivated_since\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"email\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"display_name\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"username\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"storage\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"msg_count\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"flg_deleted\": {",
															"        \"type\": \"boolean\"",
															"      },",
															"      \"errors\": {",
															"        \"type\": \"object\"",
															"      },",
															"      \"user\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"          \"id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"email\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"authentication_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"reseller_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"external_id\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"is_business\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"admin\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"customer_deactivated\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"seats_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"seats_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"archive\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"organization_id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"backup_summary\": {",
															"            \"type\": \"array\"",
															"          },",
															"          \"login_disabled\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"flg_suspended\": {",
															"            \"type\": \"boolean\"",
															"          }",
															"        },",
															"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"      }",
															"    },",
															"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"}",
															"    ",
															"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
															"        if (!valid_schema) {",
															"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
															"        }else{",
															"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
															"        }",
															"    ",
															"    ",
															"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
															"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
															"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
															"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
															"    tests[\"Theres new account personal created by username \"] = responseBody.has(\"prasetyanto.personal01\");",
															"",
															"}else if (responseCode.code === 200){",
															"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
															"}else {",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
															"    console.log(jsonData.length);",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "email",
															"type": "text",
															"value": "dme.jmeter.backup@test.com"
														},
														{
															"key": "password",
															"type": "text",
															"value": "123qwe!@"
														}
													]
												},
												"url": {
													"raw": "{{hosts}}/api/accounts?username=prasetyanto.personal01",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts"
													],
													"query": [
														{
															"key": "username",
															"value": "prasetyanto.personal01",
															"equals": true
														}
													]
												},
												"description": "Returns an array of accounts"
											},
											"response": []
										},
										{
											"name": "GET /api/accounts?email={email_account} - personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (responseCode.code === 200 && responseBody !== \"[]\") {",
															"var schema = ",
															"{",
															"    \"properties\": {",
															"      \"id\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"last_backup\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"deactivated_since\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"email\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"display_name\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"username\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"storage\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"msg_count\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"flg_deleted\": {",
															"        \"type\": \"boolean\"",
															"      },",
															"      \"errors\": {",
															"        \"type\": \"object\"",
															"      },",
															"      \"user\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"          \"id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"email\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"authentication_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"reseller_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"external_id\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"is_business\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"admin\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"customer_deactivated\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"seats_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"seats_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"archive\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"organization_id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"backup_summary\": {",
															"            \"type\": \"array\"",
															"          },",
															"          \"login_disabled\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"flg_suspended\": {",
															"            \"type\": \"boolean\"",
															"          }",
															"        },",
															"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"      }",
															"    },",
															"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"}",
															"    ",
															"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
															"        if (!valid_schema) {",
															"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
															"        }else{",
															"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
															"        }",
															"    ",
															"    ",
															"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
															"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
															"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
															"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
															"    tests[\"Theres new account personal created by username \"] = responseBody.has(\"prasetyanto.personal01\");",
															"",
															"}else if (responseCode.code === 200){",
															"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
															"}else {",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
															"    console.log(jsonData.length);",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "email",
															"type": "text",
															"value": "dme.jmeter.backup@test.com"
														},
														{
															"key": "password",
															"type": "text",
															"value": "123qwe!@"
														}
													]
												},
												"url": {
													"raw": "{{hosts}}/api/accounts?email={{Email-Account-Personal}}",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts"
													],
													"query": [
														{
															"key": "email",
															"value": "{{Email-Account-Personal}}",
															"equals": true
														}
													]
												},
												"description": "Returns an array of accounts"
											},
											"response": []
										},
										{
											"name": "PATCH /api/accounts/{id} - personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (responseCode.code === 200 && responseBody !== \"[]\") {",
															"var schema = ",
															"{",
															"    \"properties\": {",
															"      \"id\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"last_backup\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"deactivated_since\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"email\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"display_name\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"username\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"storage\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"msg_count\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"flg_deleted\": {",
															"        \"type\": \"boolean\"",
															"      },",
															"      \"errors\": {",
															"        \"type\": \"object\"",
															"      },",
															"      \"user\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"          \"id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"email\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"authentication_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"reseller_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"external_id\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"is_business\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"admin\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"customer_deactivated\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"seats_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"seats_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"archive\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"organization_id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"backup_summary\": {",
															"            \"type\": \"array\"",
															"          },",
															"          \"login_disabled\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"flg_suspended\": {",
															"            \"type\": \"boolean\"",
															"          }",
															"        },",
															"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"      }",
															"    },",
															"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"}",
															"    ",
															"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
															"        if (!valid_schema) {",
															"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
															"        }else{",
															"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
															"        }",
															"    ",
															"    ",
															"    //var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
															"    //var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
															"    //tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
															"    //tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
															"    //tests[\"Theres new account personal created by username \"] = responseBody.has(\"prasetyanto.personal01\");",
															"",
															"}else if (responseCode.code === 200){",
															"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
															"}else {",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
															"    console.log(jsonData.length);",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"description": "",
															"key": "email",
															"type": "text",
															"value": "randombackup{{$timestamp}}%40gmail.com",
															"disabled": true
														},
														{
															"description": "",
															"key": "username",
															"type": "text",
															"value": "prasetyanto.personal01",
															"disabled": true
														},
														{
															"description": "",
															"key": "password",
															"type": "text",
															"value": "personal123",
															"disabled": true
														},
														{
															"description": "",
															"key": "send_sign_in_details",
															"type": "text",
															"value": "true",
															"disabled": true
														},
														{
															"description": "",
															"key": "display_name",
															"type": "text",
															"value": "pras personal {{$timestamp}}"
														},
														{
															"description": "",
															"key": "advanced_settings",
															"type": "text",
															"value": "1",
															"disabled": true
														},
														{
															"description": "",
															"key": "host",
															"type": "text",
															"value": "imap.gmail.com",
															"disabled": true
														},
														{
															"description": "",
															"key": "port",
															"type": "text",
															"value": "993",
															"disabled": true
														},
														{
															"description": "",
															"key": "security",
															"type": "text",
															"value": "ssl",
															"disabled": true
														},
														{
															"description": "",
															"key": "email",
															"type": "text",
															"value": "{{Email-Account-Personal}}",
															"disabled": true
														},
														{
															"description": "",
															"key": "password",
															"type": "text",
															"value": "personal123"
														}
													]
												},
												"url": {
													"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts",
														"{{Id-Account-Personal}}"
													]
												},
												"description": "Add an email account to backup"
											},
											"response": []
										},
										{
											"name": "PUT /api/accounts/{id}/deactivate - personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (responseCode.code === 200 && responseBody !== \"[]\") {",
															"var schema = ",
															"{",
															"    \"properties\": {",
															"      \"id\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"last_backup\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"deactivated_since\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"email\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"display_name\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"username\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"storage\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"msg_count\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"flg_deleted\": {",
															"        \"type\": \"boolean\"",
															"      },",
															"      \"errors\": {",
															"        \"type\": \"object\"",
															"      },",
															"      \"user\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"          \"id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"email\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"authentication_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"reseller_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"external_id\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"is_business\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"admin\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"customer_deactivated\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"seats_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"seats_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"archive\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"organization_id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"backup_summary\": {",
															"            \"type\": \"array\"",
															"          },",
															"          \"login_disabled\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"flg_suspended\": {",
															"            \"type\": \"boolean\"",
															"          }",
															"        },",
															"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"      }",
															"    },",
															"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"}",
															"    ",
															"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
															"        if (!valid_schema) {",
															"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
															"        }else{",
															"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
															"        }",
															"    ",
															"    ",
															"    //var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
															"    //var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
															"    //tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
															"    //tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
															"    //tests[\"Theres new account personal created by username \"] = responseBody.has(\"prasetyanto.personal01\");",
															"",
															"}else if (responseCode.code === 200){",
															"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
															"}else {",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
															"    console.log(jsonData.length);",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}/deactivate",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts",
														"{{Id-Account-Personal}}",
														"deactivate"
													]
												},
												"description": "Returns an array of user objects."
											},
											"response": []
										},
										{
											"name": "PUT /api/accounts/{id}/reactivate - personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (responseCode.code === 200 && responseBody !== \"[]\") {",
															"var schema = ",
															"{",
															"    \"properties\": {",
															"      \"id\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"last_backup\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"deactivated_since\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"email\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"display_name\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"username\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"storage\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"msg_count\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"flg_deleted\": {",
															"        \"type\": \"boolean\"",
															"      },",
															"      \"errors\": {",
															"        \"type\": \"object\"",
															"      },",
															"      \"user\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"          \"id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"email\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"authentication_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"reseller_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"external_id\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"is_business\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"admin\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"customer_deactivated\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"seats_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"seats_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"archive\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"organization_id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"backup_summary\": {",
															"            \"type\": \"array\"",
															"          },",
															"          \"login_disabled\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"flg_suspended\": {",
															"            \"type\": \"boolean\"",
															"          }",
															"        },",
															"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"      }",
															"    },",
															"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"}",
															"    ",
															"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
															"        if (!valid_schema) {",
															"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
															"        }else{",
															"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
															"        }",
															"    ",
															"    ",
															"    //var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
															"    //var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
															"    //tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
															"    //tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
															"    //tests[\"Theres new account personal created by username \"] = responseBody.has(\"prasetyanto.personal01\");",
															"",
															"}else if (responseCode.code === 200){",
															"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
															"}else {",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
															"    console.log(jsonData.length);",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}/reactivate",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts",
														"{{Id-Account-Personal}}",
														"reactivate"
													]
												},
												"description": "Returns an array of user objects."
											},
											"response": []
										},
										{
											"name": "PUT /api/accounts/{id}/freeze - personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (responseCode.code === 200 && responseBody !== \"[]\") {",
															"var schema = ",
															"{",
															"    \"properties\": {",
															"      \"id\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"last_backup\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"deactivated_since\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"email\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"display_name\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"username\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"storage\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"msg_count\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"flg_deleted\": {",
															"        \"type\": \"boolean\"",
															"      },",
															"      \"errors\": {",
															"        \"type\": \"object\"",
															"      },",
															"      \"user\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"          \"id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"email\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"authentication_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"reseller_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"external_id\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"is_business\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"admin\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"customer_deactivated\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"seats_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"seats_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"archive\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"organization_id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"backup_summary\": {",
															"            \"type\": \"array\"",
															"          },",
															"          \"login_disabled\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"flg_suspended\": {",
															"            \"type\": \"boolean\"",
															"          }",
															"        },",
															"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"      }",
															"    },",
															"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"}",
															"    ",
															"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
															"        if (!valid_schema) {",
															"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
															"        }else{",
															"            tests[\"account id \" + jsonData.id + \" conform to schema\"] = tv4.validate(jsonData, schema);",
															"        }",
															"    ",
															"    ",
															"    //var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
															"    //var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
															"    //tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
															"    //tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
															"    //tests[\"Theres new account personal created by username \"] = responseBody.has(\"prasetyanto.personal01\");",
															"",
															"}else if (responseCode.code === 200){",
															"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
															"}else {",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
															"    console.log(jsonData.length);",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}/freeze",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts",
														"{{Id-Account-Personal}}",
														"freeze"
													]
												},
												"description": "Returns an array of user objects."
											},
											"response": []
										},
										{
											"name": "GET /api/accounts - personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (responseCode.code === 200 && responseBody !== \"[]\") {",
															"var schema = ",
															"{",
															"    \"properties\": {",
															"      \"id\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"last_backup\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"deactivated_since\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"email\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"display_name\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"username\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"storage\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"msg_count\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"flg_deleted\": {",
															"        \"type\": \"boolean\"",
															"      },",
															"      \"errors\": {",
															"        \"type\": \"object\"",
															"      },",
															"      \"user\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"          \"id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"email\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"authentication_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"reseller_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"external_id\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"is_business\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"admin\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"customer_deactivated\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"seats_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"seats_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"archive\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"organization_id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"backup_summary\": {",
															"            \"type\": \"array\"",
															"          },",
															"          \"login_disabled\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"flg_suspended\": {",
															"            \"type\": \"boolean\"",
															"          }",
															"        },",
															"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"      }",
															"    },",
															"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"}",
															"    jsonData.forEach(function(post) {",
															"    var valid_schema = tv4.validateResult(post, schema).valid;",
															"        if (!valid_schema) {",
															"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
															"        }else{",
															"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
															"        }",
															"    });",
															"    ",
															"    ",
															"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
															"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
															"    tests[\"Theres no new account personal created by id \"] = !responseBody.has(id_account_personal);",
															"    tests[\"Theres no new account personal created by email \"] = !responseBody.has(email_account_personal);",
															"    //tests[\"Theres new account personal created by username \"] = !responseBody.has(\"prasetyanto.personal01\");",
															"",
															"}else if (responseCode.code === 200){",
															"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
															"}else {",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
															"    console.log(jsonData.length);",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "email",
															"type": "text",
															"value": "dme.jmeter.backup@test.com"
														},
														{
															"key": "password",
															"type": "text",
															"value": "123qwe!@"
														}
													]
												},
												"url": {
													"raw": "{{hosts}}/api/accounts",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts"
													]
												},
												"description": "Returns an array of accounts"
											},
											"response": []
										},
										{
											"name": "GET /api/accounts?frozen_account",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (responseCode.code === 200 && responseBody !== \"[]\") {",
															"var schema = ",
															"{",
															"    \"properties\": {",
															"      \"id\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"last_backup\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"deactivated_since\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"email\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"display_name\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"username\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"storage\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"msg_count\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"flg_deleted\": {",
															"        \"type\": \"boolean\"",
															"      },",
															"      \"errors\": {",
															"        \"type\": \"object\"",
															"      },",
															"      \"user\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"          \"id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"email\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"authentication_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"reseller_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"external_id\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"is_business\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"admin\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"customer_deactivated\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"seats_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"seats_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"archive\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"organization_id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"backup_summary\": {",
															"            \"type\": \"array\"",
															"          },",
															"          \"login_disabled\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"flg_suspended\": {",
															"            \"type\": \"boolean\"",
															"          }",
															"        },",
															"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"      }",
															"    },",
															"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"}",
															"    jsonData.forEach(function(post) {",
															"    var valid_schema = tv4.validateResult(post, schema).valid;",
															"        if (!valid_schema) {",
															"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(post, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(post, schema).error.message] = false;",
															"        }else{",
															"            tests[\"account id \" + post.id + \" conform to schema\"] = tv4.validate(post, schema);",
															"        }",
															"    });",
															"    ",
															"    ",
															"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
															"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
															"    tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
															"    tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
															"    //tests[\"Theres new account personal created by username \"] = !responseBody.has(\"prasetyanto.personal01\");",
															"",
															"}else if (responseCode.code === 200){",
															"    tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
															"}else {",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
															"    console.log(jsonData.length);",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "email",
															"type": "text",
															"value": "dme.jmeter.backup@test.com"
														},
														{
															"key": "password",
															"type": "text",
															"value": "123qwe!@"
														}
													]
												},
												"url": {
													"raw": "{{hosts}}/api/accounts/frozen_accounts",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts",
														"frozen_accounts"
													]
												},
												"description": "Returns an array of accounts"
											},
											"response": []
										},
										{
											"name": "DELETE /api/accounts personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
															"",
															"if (responseCode.code === 400) {",
															"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 400;",
															"}else{",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 400\"] = false;",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{hosts}}/api/accounts/{{Id-Account-Personal}}",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts",
														"{{Id-Account-Personal}}"
													]
												},
												"description": "Returns an array of accounts"
											},
											"response": []
										},
										{
											"name": "GET /api/deleted_accounts - personal",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"tests[\"Response time \" + responseTime + \"ms is less than 60000ms\"] = responseTime < 60000;",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"//if (responseCode.code === 200 && responseBody !== \"[]\") {",
															"if (responseCode.code === 200){",
															"var schema = ",
															"{",
															"    \"properties\": {",
															"      \"id\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"last_backup\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"deactivated_since\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"email\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"display_name\": {",
															"        \"type\": \"string\"",
															"      },",
															"      \"username\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"storage\": {",
															"        \"type\": \"integer\"",
															"      },",
															"      \"msg_count\": {",
															"        \"type\": \"null\"",
															"      },",
															"      \"flg_deleted\": {",
															"        \"type\": \"boolean\"",
															"      },",
															"      \"errors\": {",
															"        \"type\": \"object\"",
															"      },",
															"      \"user\": {",
															"        \"type\": \"object\",",
															"        \"properties\": {",
															"          \"id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"email\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"authentication_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"reseller_token\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"external_id\": {",
															"            \"type\": \"string\"",
															"          },",
															"          \"is_business\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"admin\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"customer_deactivated\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"seats_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"seats_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_used\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"storage_available\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"archive\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"organization_id\": {",
															"            \"type\": \"integer\"",
															"          },",
															"          \"backup_summary\": {",
															"            \"type\": \"array\"",
															"          },",
															"          \"login_disabled\": {",
															"            \"type\": \"boolean\"",
															"          },",
															"          \"flg_suspended\": {",
															"            \"type\": \"boolean\"",
															"          }",
															"        },",
															"        \"required\": [\"id\", \"email\",\"authentication_token\", \"reseller_token\", \"external_id\", \"is_business\", \"admin\", \"customer_deactivated\", \"seats_used\", \"seats_available\", \"storage_used\", \"storage_available\", \"archive\", \"organization_id\", \"backup_summary\", \"login_disabled\", \"flg_suspended\"]",
															"      }",
															"    },",
															"    \"required\": [\"id\", \"last_backup\",\"deactivated_since\", \"email\", \"display_name\", \"username\", \"storage\", \"msg_count\", \"flg_deleted\", \"errors\", \"user\"]",
															"}",
															"    ",
															"    var valid_schema = tv4.validateResult(jsonData, schema).valid;",
															"        if (!valid_schema) {",
															"            tests[\"JSON Response has invalid schema in path [\" + tv4.validateResult(jsonData, schema).error.dataPath + \"] Error: \"+ tv4.validateResult(jsonData, schema).error.message] = false;",
															"        }else{",
															"            tests[\"response body conform to schema\"] = tv4.validate(jsonData, schema);",
															"        }",
															"    ",
															"    ",
															"    var id_account_personal = pm.environment.get(\"Id-Account-Personal\")",
															"    var email_account_personal = pm.environment.get(\"Email-Account-Personal\")",
															"    //tests[\"Theres new account personal created by id \"] = responseBody.has(id_account_personal);",
															"    //tests[\"Theres new account personal created by email \"] = responseBody.has(email_account_personal);",
															"    //tests[\"Theres new account personal created by username \"] = !responseBody.has(\"prasetyanto.personal01\");",
															"",
															"//}else if (responseCode.code === 200){",
															"    //tests[\"Failed, status code is \" + responseCode.code + \" response body is \" + responseBody] = false;",
															"}else {",
															"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = responseCode.code === 200;",
															"    console.log(jsonData.length);",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Reseller-Token",
														"value": "{{X-Reseller-Token-UOL}}"
													},
													{
														"key": "X-Access-Token",
														"value": "{{X-Access-Token-Personal}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "email",
															"type": "text",
															"value": "dme.jmeter.backup@test.com"
														},
														{
															"key": "password",
															"type": "text",
															"value": "123qwe!@"
														}
													]
												},
												"url": {
													"raw": "{{hosts}}/api/accounts/deleted_accounts",
													"host": [
														"{{hosts}}"
													],
													"path": [
														"api",
														"accounts",
														"deleted_accounts"
													]
												},
												"description": "Returns an array of accounts"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Users & Account",
					"item": [
						{
							"name": "DELETE /api/users/{id}/immediate_delete - personal",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
											"",
											"if (responseCode.code === 204) {",
											"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 204;",
											"}else{",
											"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 204\"] = false;",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Reseller-Token",
										"value": "{{X-Reseller-Token-UOL}}"
									},
									{
										"key": "X-Access-Token",
										"value": "{{X-Access-Token-UOL}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{hosts}}/api/users/{{Id-User-Personal}}/immediate_delete",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"users",
										"{{Id-User-Personal}}",
										"immediate_delete"
									]
								},
								"description": "unsubscribe a user."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "GET /api/status",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"tests[\"Response time \" + responseTime + \"ms is less than 10000ms\"] = responseTime < 10000;",
							"",
							"if (responseCode.code === 200) {",
							"    tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
							"}else{",
							"    tests[\"Failed, status code is \" + responseCode.code + \" with response body is \" + responseBody +\". Status code should be 200\"] = false;",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Reseller-Token",
						"value": "{{X-Reseller-Token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "{{hosts}}/api/status",
					"host": [
						"{{hosts}}"
					],
					"path": [
						"api",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/boom",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test whether the response status code is correct value",
							"tests[\"Status code is 500\"] = responseCode.code === 500;",
							"",
							"tests[\"Response time \" + responseTime + \" ms is less than 10000 ms.\"] = responseTime < 10000;",
							"",
							"// The Content-Type must be JSON",
							"tests[\"Content-Type header is JSON\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
							"",
							"var data = JSON.parse(responseBody);",
							"  tests[\"Response has an errors message\"] = data.errors !== undefined;",
							"",
							"// Define the JSON Schema",
							"const responseSchema = {",
							"  \"errors\": {",
							"        \"System\": [",
							"            \"Internal Server Error\"",
							"        ]",
							"    }",
							"};",
							"",
							"// Test whether the response matches the schema",
							"var response = JSON.parse(responseBody);",
							"tests[\"Response content is valid\"] = tv4.validate(response, responseSchema);",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Reseller-Token",
						"value": "{{X-Reseller-Token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "{{hosts}}/api/boom",
					"host": [
						"{{hosts}}"
					],
					"path": [
						"api",
						"boom"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/accounts/connection_failures",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is \" + responseCode.code] = responseCode.code === 200;",
							"",
							"tests[\"Response time \" + responseTime + \" ms is less than 10000 ms\"] = responseTime < 10000;",
							"",
							"/*tests[\"Body matches string 'id' is \" + responseBody.has(\"id\")] = responseBody.has(\"id\");",
							"tests[\"Body matches string 'email' is \" + responseBody.has(\"email\")] = responseBody.has(\"email\");",
							"tests[\"Body matches string 'protocol' is \" + responseBody.has(\"protocol\")] = responseBody.has(\"protocol\");",
							"tests[\"Body matches string 'username' is \" + responseBody.has(\"username\")] = responseBody.has(\"username\");",
							"tests[\"Body matches string 'flg_deleted' is \" + responseBody.has(\"flg_deleted\")] = responseBody.has(\"flg_deleted\");",
							"tests[\"Body matches string 'user_id' is \" + responseBody.has(\"user_id\")] = responseBody.has(\"user_id\");",
							"tests[\"Body matches string 'office365_request_id' is \" + responseBody.has(\"office365_request_id\")] = responseBody.has(\"office365_request_id\");",
							"tests[\"Body matches string 'hosted_exchange_request_id' is \" + responseBody.has(\"hosted_exchange_request_id\")] = responseBody.has(\"hosted_exchange_request_id\");",
							"tests[\"Body matches string 'owner_login' is \" + responseBody.has(\"owner_login\")] = responseBody.has(\"owner_login\");",
							"tests[\"Body matches string 'shared' is \" + responseBody.has(\"shared\")] = responseBody.has(\"shared\");",
							"tests[\"Body matches string 'msp' is \" + responseBody.has(\"msp\")] = responseBody.has(\"msp\");",
							"*/",
							"tests[\"Body matches string 'current_page' is \" + responseBody.has(\"current_page\")] = responseBody.has(\"current_page\");",
							"tests[\"Body matches string 'per_page' is \" + responseBody.has(\"per_page\")] = responseBody.has(\"per_page\");",
							"tests[\"Body matches string 'total_entries' is \" + responseBody.has(\"total_entries\")] = responseBody.has(\"total_entries\");",
							"tests[\"Body matches string 'total_pages' is \" + responseBody.has(\"total_pages\")] = responseBody.has(\"total_pages\");",
							"tests[\"Body matches string 'api_version' is \" + responseBody.has(\"api_version\")] = responseBody.has(\"api_version\");",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Reseller-Token",
						"value": "{{X-Reseller-Token}}"
					},
					{
						"key": "X-Access-Token",
						"value": "{{X-Access-Token-Reseller}}"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "dme.jmeter.backup@test.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123qwe!@",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{hosts}}/api/accounts/connection_failures?page=1",
					"host": [
						"{{hosts}}"
					],
					"path": [
						"api",
						"accounts",
						"connection_failures"
					],
					"query": [
						{
							"key": "page",
							"value": "1",
							"equals": true
						}
					]
				},
				"description": "Returns an array of accounts"
			},
			"response": []
		}
	]
}
